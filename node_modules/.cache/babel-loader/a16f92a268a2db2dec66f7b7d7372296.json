{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst loggedTypeFailures = {};\nimport { describeUnknownElementTypeFrameInDEV } from 'shared/ReactComponentStackFrame';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(typeSpecs, values, location, componentName, element) {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/shared/checkPropTypes.js"],"names":["loggedTypeFailures","describeUnknownElementTypeFrameInDEV","ReactSharedInternals","hasOwnProperty","ReactDebugCurrentFrame","setCurrentlyValidatingElement","element","__DEV__","owner","_owner","stack","type","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","Function","call","bind","typeSpecName","error","err","Error","name","ex","console","message"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,kBAAkB,GAAG,EAA3B;AAEA,SAAQC,oCAAR,QAAmD,iCAAnD;AAEA,OAAOC,oBAAP,MAAiC,6BAAjC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,MAAMC,sBAAsB,GAAGF,oBAAoB,CAACE,sBAApD;;AAEA,SAASC,6BAAT,CAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,OAAJ,EAAa;AACX,QAAID,OAAJ,EAAa;AACX,YAAME,KAAK,GAAGF,OAAO,CAACG,MAAtB;AACA,YAAMC,KAAK,GAAGT,oCAAoC,CAChDK,OAAO,CAACK,IADwC,EAEhDL,OAAO,CAACM,OAFwC,EAGhDJ,KAAK,GAAGA,KAAK,CAACG,IAAT,GAAgB,IAH2B,CAAlD;AAKAP,MAAAA,sBAAsB,CAACS,kBAAvB,CAA0CH,KAA1C;AACD,KARD,MAQO;AACLN,MAAAA,sBAAsB,CAACS,kBAAvB,CAA0C,IAA1C;AACD;AACF;AACF;;AAED,eAAe,SAASC,cAAT,CACbC,SADa,EAEbC,MAFa,EAGbC,QAHa,EAIbC,aAJa,EAKbZ,OALa,EAMP;AACN,MAAIC,OAAJ,EAAa;AACX;AACA,UAAMY,GAAG,GAAGC,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBnB,cAAnB,CAAZ;;AACA,SAAK,MAAMoB,YAAX,IAA2BR,SAA3B,EAAsC;AACpC,UAAII,GAAG,CAACJ,SAAD,EAAYQ,YAAZ,CAAP,EAAkC;AAChC,YAAIC,KAAJ,CADgC,CAEhC;AACA;AACA;;AACA,YAAI;AACF;AACA;AACA,cAAI,OAAOT,SAAS,CAACQ,YAAD,CAAhB,KAAmC,UAAvC,EAAmD;AACjD;AACA,kBAAME,GAAG,GAAGC,KAAK,CACf,CAACR,aAAa,IAAI,aAAlB,IACE,IADF,GAEED,QAFF,GAGE,SAHF,GAIEM,YAJF,GAKE,gBALF,GAME,8EANF,GAOE,OAAOR,SAAS,CAACQ,YAAD,CAPlB,GAQE,IARF,GASE,+FAVa,CAAjB;AAYAE,YAAAA,GAAG,CAACE,IAAJ,GAAW,qBAAX;AACA,kBAAMF,GAAN;AACD;;AACDD,UAAAA,KAAK,GAAGT,SAAS,CAACQ,YAAD,CAAT,CACNP,MADM,EAENO,YAFM,EAGNL,aAHM,EAIND,QAJM,EAKN,IALM,EAMN,8CANM,CAAR;AAQD,SA5BD,CA4BE,OAAOW,EAAP,EAAW;AACXJ,UAAAA,KAAK,GAAGI,EAAR;AACD;;AACD,YAAIJ,KAAK,IAAI,EAAEA,KAAK,YAAYE,KAAnB,CAAb,EAAwC;AACtCrB,UAAAA,6BAA6B,CAACC,OAAD,CAA7B;AACAuB,UAAAA,OAAO,CAACL,KAAR,CACE,iCACE,qCADF,GAEE,+DAFF,GAGE,iEAHF,GAIE,gEAJF,GAKE,iCANJ,EAOEN,aAAa,IAAI,aAPnB,EAQED,QARF,EASEM,YATF,EAUE,OAAOC,KAVT;AAYAnB,UAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACD;;AACD,YAAImB,KAAK,YAAYE,KAAjB,IAA0B,EAAEF,KAAK,CAACM,OAAN,IAAiB9B,kBAAnB,CAA9B,EAAsE;AACpE;AACA;AACAA,UAAAA,kBAAkB,CAACwB,KAAK,CAACM,OAAP,CAAlB,GAAoC,IAApC;AACAzB,UAAAA,6BAA6B,CAACC,OAAD,CAA7B;AACAuB,UAAAA,OAAO,CAACL,KAAR,CAAc,oBAAd,EAAoCP,QAApC,EAA8CO,KAAK,CAACM,OAApD;AACAzB,UAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACD;AACF;AACF;AACF;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}