{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  if (__DEV__) {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    const type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  if (__DEV__) {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\n\nexport function checkAttributeStringCoercion(value, attributeName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkKeyStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkPropStringCoercion(value, propName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkCSSPropertyStringCoercion(value, propName) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkHtmlStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nexport function checkFormFieldValueStringCoercion(value) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/shared/CheckStringCoercion.js"],"names":["typeName","value","__DEV__","hasToStringTag","Symbol","toStringTag","type","constructor","name","willCoercionThrow","testStringCoercion","e","checkAttributeStringCoercion","attributeName","console","error","checkKeyStringCoercion","checkPropStringCoercion","propName","checkCSSPropertyStringCoercion","checkHtmlStringCoercion","checkFormFieldValueStringCoercion"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value: mixed): string {\n  if (__DEV__) {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    const type =\n      (hasToStringTag && (value: any)[Symbol.toStringTag]) ||\n      (value: any).constructor.name ||\n      'Object';\n    return type;\n  }\n}\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction willCoercionThrow(value: mixed): boolean {\n  if (__DEV__) {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value: mixed) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + (value: any);\n}\n\nexport function checkAttributeStringCoercion(\n  value: mixed,\n  attributeName: string,\n) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` attribute is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        attributeName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkKeyStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided key is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkPropStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` prop is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkCSSPropertyStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` CSS property is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkHtmlStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided HTML markup uses a value of unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkFormFieldValueStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'Form field values (value, checked, defaultValue, or defaultChecked props)' +\n          ' must be strings, not %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}