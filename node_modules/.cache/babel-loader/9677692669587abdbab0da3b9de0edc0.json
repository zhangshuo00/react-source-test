{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport { getCurrentFiberOwnerNameInDevOrNull } from 'react-reconciler/src/ReactCurrentFiber';\nimport { setValueForProperty } from './DOMPropertyOperations';\nimport { getFiberCurrentPropsFromNode } from './ReactDOMComponentTree';\nimport { getToStringValue, toString } from './ToStringValue';\nimport { checkControlledValueProps } from '../shared/ReactControlledValuePropTypes';\nimport { updateValueIfChanged } from './inputValueTracking';\nimport getActiveElement from './getActiveElement';\nimport { disableInputAttributeSyncing } from 'shared/ReactFeatureFlags';\nimport { checkAttributeStringCoercion } from 'shared/CheckStringCoercion';\nlet didWarnValueDefaultValue = false;\nlet didWarnCheckedDefaultChecked = false;\nlet didWarnControlledToUncontrolled = false;\nlet didWarnUncontrolledToControlled = false;\n\nfunction isControlled(props) {\n  const usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\n\nexport function getHostProps(element, props) {\n  const node = element;\n  const checked = props.checked;\n  const hostProps = Object.assign({}, props, {\n    defaultChecked: undefined,\n    defaultValue: undefined,\n    value: undefined,\n    checked: checked != null ? checked : node._wrapperState.initialChecked\n  });\n  return hostProps;\n}\nexport function initWrapperState(element, props) {\n  if (__DEV__) {\n    checkControlledValueProps('input', props);\n\n    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n      console.error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\n      didWarnCheckedDefaultChecked = true;\n    }\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      console.error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\n      didWarnValueDefaultValue = true;\n    }\n  }\n\n  const node = element;\n  const defaultValue = props.defaultValue == null ? '' : props.defaultValue;\n  node._wrapperState = {\n    initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),\n    controlled: isControlled(props)\n  };\n}\nexport function updateChecked(element, props) {\n  const node = element;\n  const checked = props.checked;\n\n  if (checked != null) {\n    setValueForProperty(node, 'checked', checked, false);\n  }\n}\nexport function updateWrapper(element, props) {\n  const node = element;\n\n  if (__DEV__) {\n    const controlled = isControlled(props);\n\n    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n      console.error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n      didWarnUncontrolledToControlled = true;\n    }\n\n    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n      console.error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\n      didWarnControlledToUncontrolled = true;\n    }\n  }\n\n  updateChecked(element, props);\n  const value = getToStringValue(props.value);\n  const type = props.type;\n\n  if (value != null) {\n    if (type === 'number') {\n      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.\n      // eslint-disable-next-line\n      node.value != value) {\n        node.value = toString(value);\n      }\n    } else if (node.value !== toString(value)) {\n      node.value = toString(value);\n    }\n  } else if (type === 'submit' || type === 'reset') {\n    // Submit/reset inputs need the attribute removed completely to avoid\n    // blank-text buttons.\n    node.removeAttribute('value');\n    return;\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the value attribute, React only assigns a new value\n    // whenever the defaultValue React prop has changed. When not present,\n    // React does nothing\n    if (props.hasOwnProperty('defaultValue')) {\n      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\n    }\n  } else {\n    // When syncing the value attribute, the value comes from a cascade of\n    // properties:\n    //  1. The value React property\n    //  2. The defaultValue React property\n    //  3. Otherwise there should be no change\n    if (props.hasOwnProperty('value')) {\n      setDefaultValue(node, props.type, value);\n    } else if (props.hasOwnProperty('defaultValue')) {\n      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\n    }\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the checked attribute, the attribute is directly\n    // controllable from the defaultValue React property. It needs to be\n    // updated as new props come in.\n    if (props.defaultChecked == null) {\n      node.removeAttribute('checked');\n    } else {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, it only changes when it needs\n    // to be removed, such as transitioning from a checkbox into a text input\n    if (props.checked == null && props.defaultChecked != null) {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  }\n}\nexport function postMountWrapper(element, props, isHydrating) {\n  const node = element; // Do not assign value if it is already set. This prevents user text input\n  // from being lost during SSR hydration.\n\n  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {\n    const type = props.type;\n    const isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the\n    // default value provided by the browser. See: #12872\n\n    if (isButton && (props.value === undefined || props.value === null)) {\n      return;\n    }\n\n    const initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n\n    if (!isHydrating) {\n      if (disableInputAttributeSyncing) {\n        const value = getToStringValue(props.value); // When not syncing the value attribute, the value property points\n        // directly to the React prop. Only assign it if it exists.\n\n        if (value != null) {\n          // Always assign on buttons so that it is possible to assign an\n          // empty string to clear button text.\n          //\n          // Otherwise, do not re-assign the value property if is empty. This\n          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from\n          // prematurely marking required inputs as invalid. Equality is compared\n          // to the current value in case the browser provided value is not an\n          // empty string.\n          if (isButton || value !== node.value) {\n            node.value = toString(value);\n          }\n        }\n      } else {\n        // When syncing the value attribute, the value property should use\n        // the wrapperState._initialValue property. This uses:\n        //\n        //   1. The value React property when present\n        //   2. The defaultValue React property when present\n        //   3. An empty string\n        if (initialValue !== node.value) {\n          node.value = initialValue;\n        }\n      }\n    }\n\n    if (disableInputAttributeSyncing) {\n      // When not syncing the value attribute, assign the value attribute\n      // directly from the defaultValue React property (when present)\n      const defaultValue = getToStringValue(props.defaultValue);\n\n      if (defaultValue != null) {\n        node.defaultValue = toString(defaultValue);\n      }\n    } else {\n      // Otherwise, the value attribute is synchronized to the property,\n      // so we assign defaultValue to the same thing as the value property\n      // assignment step above.\n      node.defaultValue = initialValue;\n    }\n  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n\n\n  const name = node.name;\n\n  if (name !== '') {\n    node.name = '';\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the checked attribute, the checked property\n    // never gets assigned. It must be manually set. We don't want\n    // to do this when hydrating so that existing user input isn't\n    // modified\n    if (!isHydrating) {\n      updateChecked(element, props);\n    } // Only assign the checked attribute if it is defined. This saves\n    // a DOM write when controlling the checked attribute isn't needed\n    // (text inputs, submit/reset)\n\n\n    if (props.hasOwnProperty('defaultChecked')) {\n      node.defaultChecked = !node.defaultChecked;\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, both the checked property and\n    // attribute are assigned at the same time using defaultChecked. This uses:\n    //\n    //   1. The checked React property when present\n    //   2. The defaultChecked React property when present\n    //   3. Otherwise, false\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !!node._wrapperState.initialChecked;\n  }\n\n  if (name !== '') {\n    node.name = name;\n  }\n}\nexport function restoreControlledState(element, props) {\n  const node = element;\n  updateWrapper(node, props);\n  updateNamedCousins(node, props);\n}\n\nfunction updateNamedCousins(rootNode, props) {\n  const name = props.name;\n\n  if (props.type === 'radio' && name != null) {\n    let queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    } // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n\n\n    if (__DEV__) {\n      checkAttributeStringCoercion(name, 'name');\n    }\n\n    const group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = group[i];\n\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      } // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n\n\n      const otherProps = getFiberCurrentPropsFromNode(otherNode);\n\n      if (!otherProps) {\n        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');\n      } // We need update the tracked value on the named cousin since the value\n      // was changed but the input saw no event or value set\n\n\n      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n\n      updateWrapper(otherNode, otherProps);\n    }\n  }\n} // In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\n\n\nexport function setDefaultValue(node, type, value) {\n  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {\n    if (value == null) {\n      node.defaultValue = toString(node._wrapperState.initialValue);\n    } else if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/client/ReactDOMInput.js"],"names":["getCurrentFiberOwnerNameInDevOrNull","setValueForProperty","getFiberCurrentPropsFromNode","getToStringValue","toString","checkControlledValueProps","updateValueIfChanged","getActiveElement","disableInputAttributeSyncing","checkAttributeStringCoercion","didWarnValueDefaultValue","didWarnCheckedDefaultChecked","didWarnControlledToUncontrolled","didWarnUncontrolledToControlled","isControlled","props","usesChecked","type","checked","value","getHostProps","element","node","hostProps","Object","assign","defaultChecked","undefined","defaultValue","_wrapperState","initialChecked","initWrapperState","__DEV__","console","error","initialValue","controlled","updateChecked","updateWrapper","removeAttribute","hasOwnProperty","setDefaultValue","postMountWrapper","isHydrating","isButton","name","restoreControlledState","updateNamedCousins","rootNode","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","length","otherNode","form","otherProps","Error","ownerDocument"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\n\nimport {setValueForProperty} from './DOMPropertyOperations';\nimport {getFiberCurrentPropsFromNode} from './ReactDOMComponentTree';\nimport {getToStringValue, toString} from './ToStringValue';\nimport {checkControlledValueProps} from '../shared/ReactControlledValuePropTypes';\nimport {updateValueIfChanged} from './inputValueTracking';\nimport getActiveElement from './getActiveElement';\nimport {disableInputAttributeSyncing} from 'shared/ReactFeatureFlags';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\n\nimport type {ToStringValue} from './ToStringValue';\n\ntype InputWithWrapperState = HTMLInputElement & {\n  _wrapperState: {\n    initialValue: ToStringValue,\n    initialChecked: ?boolean,\n    controlled?: boolean,\n    ...\n  },\n  ...\n};\n\nlet didWarnValueDefaultValue = false;\nlet didWarnCheckedDefaultChecked = false;\nlet didWarnControlledToUncontrolled = false;\nlet didWarnUncontrolledToControlled = false;\n\nfunction isControlled(props) {\n  const usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nexport function getHostProps(element: Element, props: Object) {\n  const node = ((element: any): InputWithWrapperState);\n  const checked = props.checked;\n\n  const hostProps = Object.assign({}, props, {\n    defaultChecked: undefined,\n    defaultValue: undefined,\n    value: undefined,\n    checked: checked != null ? checked : node._wrapperState.initialChecked,\n  });\n\n  return hostProps;\n}\n\nexport function initWrapperState(element: Element, props: Object) {\n  if (__DEV__) {\n    checkControlledValueProps('input', props);\n\n    if (\n      props.checked !== undefined &&\n      props.defaultChecked !== undefined &&\n      !didWarnCheckedDefaultChecked\n    ) {\n      console.error(\n        '%s contains an input of type %s with both checked and defaultChecked props. ' +\n          'Input elements must be either controlled or uncontrolled ' +\n          '(specify either the checked prop, or the defaultChecked prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled input ' +\n          'element and remove one of these props. More info: ' +\n          'https://reactjs.org/link/controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n        props.type,\n      );\n      didWarnCheckedDefaultChecked = true;\n    }\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValueDefaultValue\n    ) {\n      console.error(\n        '%s contains an input of type %s with both value and defaultValue props. ' +\n          'Input elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled input ' +\n          'element and remove one of these props. More info: ' +\n          'https://reactjs.org/link/controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n        props.type,\n      );\n      didWarnValueDefaultValue = true;\n    }\n  }\n\n  const node = ((element: any): InputWithWrapperState);\n  const defaultValue = props.defaultValue == null ? '' : props.defaultValue;\n\n  node._wrapperState = {\n    initialChecked:\n      props.checked != null ? props.checked : props.defaultChecked,\n    initialValue: getToStringValue(\n      props.value != null ? props.value : defaultValue,\n    ),\n    controlled: isControlled(props),\n  };\n}\n\nexport function updateChecked(element: Element, props: Object) {\n  const node = ((element: any): InputWithWrapperState);\n  const checked = props.checked;\n  if (checked != null) {\n    setValueForProperty(node, 'checked', checked, false);\n  }\n}\n\nexport function updateWrapper(element: Element, props: Object) {\n  const node = ((element: any): InputWithWrapperState);\n  if (__DEV__) {\n    const controlled = isControlled(props);\n\n    if (\n      !node._wrapperState.controlled &&\n      controlled &&\n      !didWarnUncontrolledToControlled\n    ) {\n      console.error(\n        'A component is changing an uncontrolled input to be controlled. ' +\n          'This is likely caused by the value changing from undefined to ' +\n          'a defined value, which should not happen. ' +\n          'Decide between using a controlled or uncontrolled input ' +\n          'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components',\n      );\n      didWarnUncontrolledToControlled = true;\n    }\n    if (\n      node._wrapperState.controlled &&\n      !controlled &&\n      !didWarnControlledToUncontrolled\n    ) {\n      console.error(\n        'A component is changing a controlled input to be uncontrolled. ' +\n          'This is likely caused by the value changing from a defined to ' +\n          'undefined, which should not happen. ' +\n          'Decide between using a controlled or uncontrolled input ' +\n          'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components',\n      );\n      didWarnControlledToUncontrolled = true;\n    }\n  }\n\n  updateChecked(element, props);\n\n  const value = getToStringValue(props.value);\n  const type = props.type;\n\n  if (value != null) {\n    if (type === 'number') {\n      if (\n        (value === 0 && node.value === '') ||\n        // We explicitly want to coerce to number here if possible.\n        // eslint-disable-next-line\n        node.value != (value: any)\n      ) {\n        node.value = toString((value: any));\n      }\n    } else if (node.value !== toString((value: any))) {\n      node.value = toString((value: any));\n    }\n  } else if (type === 'submit' || type === 'reset') {\n    // Submit/reset inputs need the attribute removed completely to avoid\n    // blank-text buttons.\n    node.removeAttribute('value');\n    return;\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the value attribute, React only assigns a new value\n    // whenever the defaultValue React prop has changed. When not present,\n    // React does nothing\n    if (props.hasOwnProperty('defaultValue')) {\n      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\n    }\n  } else {\n    // When syncing the value attribute, the value comes from a cascade of\n    // properties:\n    //  1. The value React property\n    //  2. The defaultValue React property\n    //  3. Otherwise there should be no change\n    if (props.hasOwnProperty('value')) {\n      setDefaultValue(node, props.type, value);\n    } else if (props.hasOwnProperty('defaultValue')) {\n      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\n    }\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the checked attribute, the attribute is directly\n    // controllable from the defaultValue React property. It needs to be\n    // updated as new props come in.\n    if (props.defaultChecked == null) {\n      node.removeAttribute('checked');\n    } else {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, it only changes when it needs\n    // to be removed, such as transitioning from a checkbox into a text input\n    if (props.checked == null && props.defaultChecked != null) {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  }\n}\n\nexport function postMountWrapper(\n  element: Element,\n  props: Object,\n  isHydrating: boolean,\n) {\n  const node = ((element: any): InputWithWrapperState);\n\n  // Do not assign value if it is already set. This prevents user text input\n  // from being lost during SSR hydration.\n  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {\n    const type = props.type;\n    const isButton = type === 'submit' || type === 'reset';\n\n    // Avoid setting value attribute on submit/reset inputs as it overrides the\n    // default value provided by the browser. See: #12872\n    if (isButton && (props.value === undefined || props.value === null)) {\n      return;\n    }\n\n    const initialValue = toString(node._wrapperState.initialValue);\n\n    // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n    if (!isHydrating) {\n      if (disableInputAttributeSyncing) {\n        const value = getToStringValue(props.value);\n\n        // When not syncing the value attribute, the value property points\n        // directly to the React prop. Only assign it if it exists.\n        if (value != null) {\n          // Always assign on buttons so that it is possible to assign an\n          // empty string to clear button text.\n          //\n          // Otherwise, do not re-assign the value property if is empty. This\n          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from\n          // prematurely marking required inputs as invalid. Equality is compared\n          // to the current value in case the browser provided value is not an\n          // empty string.\n          if (isButton || value !== node.value) {\n            node.value = toString(value);\n          }\n        }\n      } else {\n        // When syncing the value attribute, the value property should use\n        // the wrapperState._initialValue property. This uses:\n        //\n        //   1. The value React property when present\n        //   2. The defaultValue React property when present\n        //   3. An empty string\n        if (initialValue !== node.value) {\n          node.value = initialValue;\n        }\n      }\n    }\n\n    if (disableInputAttributeSyncing) {\n      // When not syncing the value attribute, assign the value attribute\n      // directly from the defaultValue React property (when present)\n      const defaultValue = getToStringValue(props.defaultValue);\n      if (defaultValue != null) {\n        node.defaultValue = toString(defaultValue);\n      }\n    } else {\n      // Otherwise, the value attribute is synchronized to the property,\n      // so we assign defaultValue to the same thing as the value property\n      // assignment step above.\n      node.defaultValue = initialValue;\n    }\n  }\n\n  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n  const name = node.name;\n  if (name !== '') {\n    node.name = '';\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the checked attribute, the checked property\n    // never gets assigned. It must be manually set. We don't want\n    // to do this when hydrating so that existing user input isn't\n    // modified\n    if (!isHydrating) {\n      updateChecked(element, props);\n    }\n\n    // Only assign the checked attribute if it is defined. This saves\n    // a DOM write when controlling the checked attribute isn't needed\n    // (text inputs, submit/reset)\n    if (props.hasOwnProperty('defaultChecked')) {\n      node.defaultChecked = !node.defaultChecked;\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, both the checked property and\n    // attribute are assigned at the same time using defaultChecked. This uses:\n    //\n    //   1. The checked React property when present\n    //   2. The defaultChecked React property when present\n    //   3. Otherwise, false\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !!node._wrapperState.initialChecked;\n  }\n\n  if (name !== '') {\n    node.name = name;\n  }\n}\n\nexport function restoreControlledState(element: Element, props: Object) {\n  const node = ((element: any): InputWithWrapperState);\n  updateWrapper(node, props);\n  updateNamedCousins(node, props);\n}\n\nfunction updateNamedCousins(rootNode, props) {\n  const name = props.name;\n  if (props.type === 'radio' && name != null) {\n    let queryRoot: Element = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = ((queryRoot.parentNode: any): Element);\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n    if (__DEV__) {\n      checkAttributeStringCoercion(name, 'name');\n    }\n    const group = queryRoot.querySelectorAll(\n      'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]',\n    );\n\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = ((group[i]: any): HTMLInputElement);\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      const otherProps = getFiberCurrentPropsFromNode(otherNode);\n\n      if (!otherProps) {\n        throw new Error(\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n            'same `name` is not supported.',\n        );\n      }\n\n      // We need update the tracked value on the named cousin since the value\n      // was changed but the input saw no event or value set\n      updateValueIfChanged(otherNode);\n\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      updateWrapper(otherNode, otherProps);\n    }\n  }\n}\n\n// In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\nexport function setDefaultValue(\n  node: InputWithWrapperState,\n  type: ?string,\n  value: *,\n) {\n  if (\n    // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n    type !== 'number' ||\n    getActiveElement(node.ownerDocument) !== node\n  ) {\n    if (value == null) {\n      node.defaultValue = toString(node._wrapperState.initialValue);\n    } else if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}