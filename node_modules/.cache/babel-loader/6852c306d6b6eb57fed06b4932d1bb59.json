{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { createCursor, push, pop } from './ReactFiberStack.old';\nconst DefaultSuspenseContext = 0b00; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nconst SubtreeSuspenseContextMask = 0b01; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nexport const InvisibleParentSuspenseContext = 0b01; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nexport const ForceSuspenseFallback = 0b10;\nexport const suspenseStackCursor = createCursor(DefaultSuspenseContext);\nexport function hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nexport function setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nexport function setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nexport function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nexport function pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nexport function popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-reconciler/src/ReactFiberSuspenseContext.old.js"],"names":["createCursor","push","pop","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","parentContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","fiber","newContext","popSuspenseContext"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,YAAR,EAAsBC,IAAtB,EAA4BC,GAA5B,QAAsC,uBAAtC;AAMA,MAAMC,sBAAuC,GAAG,IAAhD,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,0BAA2C,GAAG,IAApD,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,8BAAsD,GAAG,IAA/D,C,CAEP;AAEA;AACA;;AACA,OAAO,MAAMC,qBAA6C,GAAG,IAAtD;AAEP,OAAO,MAAMC,mBAAiD,GAAGP,YAAY,CAC3EG,sBAD2E,CAAtE;AAIP,OAAO,SAASK,kBAAT,CACLC,aADK,EAELC,IAFK,EAGI;AACT,SAAO,CAACD,aAAa,GAAGC,IAAjB,MAA2B,CAAlC;AACD;AAED,OAAO,SAASC,gCAAT,CACLF,aADK,EAEY;AACjB,SAAOA,aAAa,GAAGL,0BAAvB;AACD;AAED,OAAO,SAASQ,yBAAT,CACLH,aADK,EAELI,cAFK,EAGY;AACjB,SAAQJ,aAAa,GAAGL,0BAAjB,GAA+CS,cAAtD;AACD;AAED,OAAO,SAASC,yBAAT,CACLL,aADK,EAELM,cAFK,EAGY;AACjB,SAAON,aAAa,GAAGM,cAAvB;AACD;AAED,OAAO,SAASC,mBAAT,CACLC,KADK,EAELC,UAFK,EAGC;AACNjB,EAAAA,IAAI,CAACM,mBAAD,EAAsBW,UAAtB,EAAkCD,KAAlC,CAAJ;AACD;AAED,OAAO,SAASE,kBAAT,CAA4BF,KAA5B,EAAgD;AACrDf,EAAAA,GAAG,CAACK,mBAAD,EAAsBU,KAAtB,CAAH;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n"]},"metadata":{},"sourceType":"module"}