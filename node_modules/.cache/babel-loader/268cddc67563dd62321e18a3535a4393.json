{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { showErrorDialog } from './ReactFiberErrorDialog';\nimport { ClassComponent } from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { HostRoot } from 'react-reconciler/src/ReactWorkTags';\nexport function logCapturedError(boundary, errorInfo) {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    const error = errorInfo.value;\n\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName ? `The above error occurred in the <${componentName}> component:` : 'The above error occurred in one of your React components:';\n      let errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = `React will try to recreate this component tree from scratch ` + `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n\n      const combinedMessage = `${componentNameMessage}\\n${componentStack}\\n\\n` + `${errorBoundaryMessage}`; // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/ReactFiberErrorLogger.js"],"names":["showErrorDialog","ClassComponent","getComponentNameFromFiber","HostRoot","logCapturedError","boundary","errorInfo","logError","error","value","__DEV__","source","stack","componentStack","_suppressLogging","tag","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","setTimeout"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,eAAR,QAA8B,yBAA9B;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AACA,OAAOC,yBAAP,MAAsC,gDAAtC;AACA,SAAQC,QAAR,QAAuB,oCAAvB;AAEA,OAAO,SAASC,gBAAT,CACLC,QADK,EAELC,SAFK,EAGC;AACN,MAAI;AACF,UAAMC,QAAQ,GAAGP,eAAe,CAACK,QAAD,EAAWC,SAAX,CAAhC,CADE,CAGF;AACA;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD;;AAED,UAAMC,KAAK,GAAIF,SAAS,CAACG,KAAzB;;AACA,QAAIC,OAAJ,EAAa;AACX,YAAMC,MAAM,GAAGL,SAAS,CAACK,MAAzB;AACA,YAAMC,KAAK,GAAGN,SAAS,CAACM,KAAxB;AACA,YAAMC,cAAc,GAAGD,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAAhD,CAHW,CAIX;AACA;AACA;;AACA,UAAIJ,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACM,gBAA3B,EAA6C;AAC3C,YAAIT,QAAQ,CAACU,GAAT,KAAiBd,cAArB,EAAqC;AACnC;AACA;AACA;AACA;AACD,SAN0C,CAO3C;AACA;AACA;AACA;;;AACAe,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAX2C,CAWlB;AACzB;AACA;AACD;;AAED,YAAMS,aAAa,GAAGN,MAAM,GAAGT,yBAAyB,CAACS,MAAD,CAA5B,GAAuC,IAAnE;AACA,YAAMO,oBAAoB,GAAGD,aAAa,GACrC,oCAAmCA,aAAc,cADZ,GAEtC,2DAFJ;AAIA,UAAIE,oBAAJ;;AACA,UAAId,QAAQ,CAACU,GAAT,KAAiBZ,QAArB,EAA+B;AAC7BgB,QAAAA,oBAAoB,GAClB,2FACA,uFAFF;AAGD,OAJD,MAIO;AACL,cAAMC,iBAAiB,GACrBlB,yBAAyB,CAACG,QAAD,CAAzB,IAAuC,WADzC;AAEAc,QAAAA,oBAAoB,GACjB,8DAAD,GACC,0CAAyCC,iBAAkB,GAF9D;AAGD;;AACD,YAAMC,eAAe,GAClB,GAAEH,oBAAqB,KAAIL,cAAe,MAA3C,GACC,GAAEM,oBAAqB,EAF1B,CAxCW,CA4CX;AACA;AACA;AACA;;AACAH,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBK,eAAjB,EAhDW,CAgDwB;AACpC,KAjDD,MAiDO;AACL;AACA;AACA;AACAL,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBR,KAAjB,EAJK,CAIoB;AAC1B;AACF,GAjED,CAiEE,OAAOc,CAAP,EAAU;AACV;AACA;AACA;AACA;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMD,CAAN;AACD,KAFS,CAAV;AAGD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}