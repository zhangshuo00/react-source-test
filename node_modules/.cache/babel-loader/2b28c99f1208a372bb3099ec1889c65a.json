{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nlet didWarnAboutMessageChannel = false;\nlet enqueueTaskImpl = null;\nexport default function enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      const requireString = ('require' + Math.random()).slice(0, 7);\n      const nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        if (__DEV__) {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              console.error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        const channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/shared/enqueueTask.js"],"names":["didWarnAboutMessageChannel","enqueueTaskImpl","enqueueTask","task","requireString","Math","random","slice","nodeRequire","module","call","setImmediate","_err","callback","__DEV__","MessageChannel","console","error","channel","port1","onmessage","port2","postMessage","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,0BAA0B,GAAG,KAAjC;AACA,IAAIC,eAAe,GAAG,IAAtB;AAEA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAAuC;AACpD,MAAIF,eAAe,KAAK,IAAxB,EAA8B;AAC5B,QAAI;AACF;AACA;AACA,YAAMG,aAAa,GAAG,CAAC,YAAYC,IAAI,CAACC,MAAL,EAAb,EAA4BC,KAA5B,CAAkC,CAAlC,EAAqC,CAArC,CAAtB;AACA,YAAMC,WAAW,GAAGC,MAAM,IAAIA,MAAM,CAACL,aAAD,CAApC,CAJE,CAKF;AACA;;AACAH,MAAAA,eAAe,GAAGO,WAAW,CAACE,IAAZ,CAAiBD,MAAjB,EAAyB,QAAzB,EAAmCE,YAArD;AACD,KARD,CAQE,OAAOC,IAAP,EAAa;AACb;AACA;AACA;AACAX,MAAAA,eAAe,GAAG,UAASY,QAAT,EAA+B;AAC/C,YAAIC,OAAJ,EAAa;AACX,cAAId,0BAA0B,KAAK,KAAnC,EAA0C;AACxCA,YAAAA,0BAA0B,GAAG,IAA7B;;AACA,gBAAI,OAAOe,cAAP,KAA0B,WAA9B,EAA2C;AACzCC,cAAAA,OAAO,CAACC,KAAR,CACE,iEACE,+DADF,GAEE,mEAFF,GAGE,gCAJJ;AAMD;AACF;AACF;;AACD,cAAMC,OAAO,GAAG,IAAIH,cAAJ,EAAhB;AACAG,QAAAA,OAAO,CAACC,KAAR,CAAcC,SAAd,GAA0BP,QAA1B;AACAK,QAAAA,OAAO,CAACG,KAAR,CAAcC,WAAd,CAA0BC,SAA1B;AACD,OAjBD;AAkBD;AACF;;AACD,SAAOtB,eAAe,CAACE,IAAD,CAAtB;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet didWarnAboutMessageChannel = false;\nlet enqueueTaskImpl = null;\n\nexport default function enqueueTask(task: () => void) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      const requireString = ('require' + Math.random()).slice(0, 7);\n      const nodeRequire = module && module[requireString];\n      // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function(callback: () => void) {\n        if (__DEV__) {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n            if (typeof MessageChannel === 'undefined') {\n              console.error(\n                'This browser does not have a MessageChannel implementation, ' +\n                  'so enqueuing tasks via await act(async () => ...) will fail. ' +\n                  'Please file an issue at https://github.com/facebook/react/issues ' +\n                  'if you encounter this warning.',\n              );\n            }\n          }\n        }\n        const channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n  return enqueueTaskImpl(task);\n}\n"]},"metadata":{},"sourceType":"module"}