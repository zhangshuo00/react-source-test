{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getInstanceFromNode, isContainerMarkedAsRoot, markContainerAsRoot, unmarkContainerAsRoot } from './ReactDOMComponentTree';\nimport { listenToAllSupportedEvents } from '../events/DOMPluginEventSystem';\nimport { isValidContainerLegacy } from './ReactDOMRoot';\nimport { DOCUMENT_NODE, ELEMENT_NODE, COMMENT_NODE } from '../shared/HTMLNodeType';\nimport { createContainer, findHostInstanceWithNoPortals, updateContainer, flushSync, getPublicRootInstance, findHostInstance, findHostInstanceWithWarning } from 'react-reconciler/src/ReactFiberReconciler';\nimport { LegacyRoot } from 'react-reconciler/src/ReactRootTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { has as hasInstance } from 'shared/ReactInstanceMap';\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nlet topLevelUpdateWarnings;\n\nif (__DEV__) {\n  topLevelUpdateWarnings = container => {\n    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\n      const hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);\n\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          console.error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\n        }\n      }\n    }\n\n    const isRootRenderedBySomeReact = !!container._reactRootContainer;\n    const rootEl = getReactRootElementInContainer(container);\n    const hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\n\n    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {\n      console.error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\n    }\n\n    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\n      console.error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');\n    }\n  };\n}\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction legacyCreateRootFromDOMContainer(container, forceHydrate) {\n  // First clear any existing content.\n  if (!forceHydrate) {\n    let rootSibling;\n\n    while (rootSibling = container.lastChild) {\n      container.removeChild(rootSibling);\n    }\n  }\n\n  const root = createContainer(container, LegacyRoot, forceHydrate, null, // hydrationCallbacks\n  false, // isStrictMode\n  false // concurrentUpdatesByDefaultOverride,\n  );\n  markContainerAsRoot(root.current, container);\n  const rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\n  listenToAllSupportedEvents(rootContainerElement);\n  return root;\n}\n\nfunction warnOnInvalidCallback(callback, callerName) {\n  if (__DEV__) {\n    if (callback !== null && typeof callback !== 'function') {\n      console.error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  }\n}\n\nfunction legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n  if (__DEV__) {\n    topLevelUpdateWarnings(container);\n    warnOnInvalidCallback(callback === undefined ? null : callback, 'render');\n  }\n\n  let root = container._reactRootContainer;\n  let fiberRoot;\n\n  if (!root) {\n    // Initial mount\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);\n    fiberRoot = root;\n\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n\n      callback = function () {\n        const instance = getPublicRootInstance(fiberRoot);\n        originalCallback.call(instance);\n      };\n    } // Initial mount should not be batched.\n\n\n    flushSync(() => {\n      updateContainer(children, fiberRoot, parentComponent, callback);\n    });\n  } else {\n    fiberRoot = root;\n\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n\n      callback = function () {\n        const instance = getPublicRootInstance(fiberRoot);\n        originalCallback.call(instance);\n      };\n    } // Update\n\n\n    updateContainer(children, fiberRoot, parentComponent, callback);\n  }\n\n  return getPublicRootInstance(fiberRoot);\n}\n\nexport function findDOMNode(componentOrElement) {\n  if (__DEV__) {\n    const owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.stateNode !== null) {\n      const warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n\n      if (!warnedAboutRefsInRender) {\n        console.error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n\n  if (componentOrElement == null) {\n    return null;\n  }\n\n  if (componentOrElement.nodeType === ELEMENT_NODE) {\n    return componentOrElement;\n  }\n\n  if (__DEV__) {\n    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');\n  }\n\n  return findHostInstance(componentOrElement);\n}\nexport function hydrate(element, container, callback) {\n  if (__DEV__) {\n    console.error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (__DEV__) {\n    const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      console.error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');\n    }\n  } // TODO: throw or warn if we couldn't hydrate?\n\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);\n}\nexport function render(element, container, callback) {\n  if (__DEV__) {\n    console.error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \"if it's running React 17. Learn \" + 'more: https://reactjs.org/link/switch-to-createroot');\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (__DEV__) {\n    const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      console.error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');\n    }\n  }\n\n  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n}\nexport function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n  if (!isValidContainerLegacy(containerNode)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (parentComponent == null || !hasInstance(parentComponent)) {\n    throw new Error('parentComponent must be a valid React Component');\n  }\n\n  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n}\nexport function unmountComponentAtNode(container) {\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');\n  }\n\n  if (__DEV__) {\n    const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\n\n    if (isModernRoot) {\n      console.error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');\n    }\n  }\n\n  if (container._reactRootContainer) {\n    if (__DEV__) {\n      const rootEl = getReactRootElementInContainer(container);\n      const renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);\n\n      if (renderedByDifferentReact) {\n        console.error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.');\n      }\n    } // Unmount should not be batched.\n\n\n    flushSync(() => {\n      legacyRenderSubtreeIntoContainer(null, null, container, false, () => {\n        // $FlowFixMe This should probably use `delete container._reactRootContainer`\n        container._reactRootContainer = null;\n        unmarkContainerAsRoot(container);\n      });\n    }); // If you call unmountComponentAtNode twice in quick succession, you'll\n    // get `true` twice. That's probably fine?\n\n    return true;\n  } else {\n    if (__DEV__) {\n      const rootEl = getReactRootElementInContainer(container);\n      const hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl)); // Check if the container itself is a React root node.\n\n      const isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;\n\n      if (hasNonRootReactChild) {\n        console.error(\"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/client/ReactDOMLegacy.js"],"names":["getInstanceFromNode","isContainerMarkedAsRoot","markContainerAsRoot","unmarkContainerAsRoot","listenToAllSupportedEvents","isValidContainerLegacy","DOCUMENT_NODE","ELEMENT_NODE","COMMENT_NODE","createContainer","findHostInstanceWithNoPortals","updateContainer","flushSync","getPublicRootInstance","findHostInstance","findHostInstanceWithWarning","LegacyRoot","getComponentNameFromType","ReactSharedInternals","has","hasInstance","ReactCurrentOwner","topLevelUpdateWarnings","__DEV__","container","_reactRootContainer","nodeType","hostInstance","current","parentNode","console","error","isRootRenderedBySomeReact","rootEl","getReactRootElementInContainer","hasNonRootReactChild","tagName","toUpperCase","documentElement","firstChild","legacyCreateRootFromDOMContainer","forceHydrate","rootSibling","lastChild","removeChild","root","rootContainerElement","warnOnInvalidCallback","callback","callerName","legacyRenderSubtreeIntoContainer","parentComponent","children","undefined","fiberRoot","originalCallback","instance","call","findDOMNode","componentOrElement","owner","stateNode","warnedAboutRefsInRender","_warnedAboutRefsInRender","type","hydrate","element","Error","isModernRoot","render","unstable_renderSubtreeIntoContainer","containerNode","unmountComponentAtNode","renderedByDifferentReact","isContainerReactRoot"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,SACEA,mBADF,EAEEC,uBAFF,EAGEC,mBAHF,EAIEC,qBAJF,QAKO,yBALP;AAMA,SAAQC,0BAAR,QAAyC,gCAAzC;AACA,SAAQC,sBAAR,QAAqC,gBAArC;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,YAHF,QAIO,wBAJP;AAMA,SACEC,eADF,EAEEC,6BAFF,EAGEC,eAHF,EAIEC,SAJF,EAKEC,qBALF,EAMEC,gBANF,EAOEC,2BAPF,QAQO,2CARP;AASA,SAAQC,UAAR,QAAyB,oCAAzB;AACA,OAAOC,wBAAP,MAAqC,iCAArC;AACA,OAAOC,oBAAP,MAAiC,6BAAjC;AACA,SAAQC,GAAG,IAAIC,WAAf,QAAiC,yBAAjC;AAEA,MAAMC,iBAAiB,GAAGH,oBAAoB,CAACG,iBAA/C;AAEA,IAAIC,sBAAJ;;AAEA,IAAIC,OAAJ,EAAa;AACXD,EAAAA,sBAAsB,GAAIE,SAAD,IAA0B;AACjD,QAAIA,SAAS,CAACC,mBAAV,IAAiCD,SAAS,CAACE,QAAV,KAAuBlB,YAA5D,EAA0E;AACxE,YAAMmB,YAAY,GAAGjB,6BAA6B,CAChDc,SAAS,CAACC,mBAAV,CAA8BG,OADkB,CAAlD;;AAGA,UAAID,YAAJ,EAAkB;AAChB,YAAIA,YAAY,CAACE,UAAb,KAA4BL,SAAhC,EAA2C;AACzCM,UAAAA,OAAO,CAACC,KAAR,CACE,mEACE,yDADF,GAEE,iDAFF,GAGE,uDAJJ;AAMD;AACF;AACF;;AAED,UAAMC,yBAAyB,GAAG,CAAC,CAACR,SAAS,CAACC,mBAA9C;AACA,UAAMQ,MAAM,GAAGC,8BAA8B,CAACV,SAAD,CAA7C;AACA,UAAMW,oBAAoB,GAAG,CAAC,EAAEF,MAAM,IAAIjC,mBAAmB,CAACiC,MAAD,CAA/B,CAA9B;;AAEA,QAAIE,oBAAoB,IAAI,CAACH,yBAA7B,EAAwD;AACtDF,MAAAA,OAAO,CAACC,KAAR,CACE,oEACE,kEADF,GAEE,mEAFF,GAGE,mEAJJ;AAMD;;AAED,QACEP,SAAS,CAACE,QAAV,KAAuBnB,YAAvB,IACEiB,SAAF,CAA4BY,OAD5B,IAEEZ,SAAF,CAA4BY,OAA5B,CAAoCC,WAApC,OAAsD,MAHxD,EAIE;AACAP,MAAAA,OAAO,CAACC,KAAR,CACE,mEACE,uEADF,GAEE,0DAFF,GAGE,wEAHF,GAIE,eALJ;AAOD;AACF,GA3CD;AA4CD;;AAED,SAASG,8BAAT,CAAwCV,SAAxC,EAAwD;AACtD,MAAI,CAACA,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,MAAIA,SAAS,CAACE,QAAV,KAAuBpB,aAA3B,EAA0C;AACxC,WAAOkB,SAAS,CAACc,eAAjB;AACD,GAFD,MAEO;AACL,WAAOd,SAAS,CAACe,UAAjB;AACD;AACF;;AAED,SAASC,gCAAT,CACEhB,SADF,EAEEiB,YAFF,EAGa;AACX;AACA,MAAI,CAACA,YAAL,EAAmB;AACjB,QAAIC,WAAJ;;AACA,WAAQA,WAAW,GAAGlB,SAAS,CAACmB,SAAhC,EAA4C;AAC1CnB,MAAAA,SAAS,CAACoB,WAAV,CAAsBF,WAAtB;AACD;AACF;;AAED,QAAMG,IAAI,GAAGpC,eAAe,CAC1Be,SAD0B,EAE1BR,UAF0B,EAG1ByB,YAH0B,EAI1B,IAJ0B,EAIpB;AACN,OAL0B,EAKnB;AACP,OAN0B,CAMnB;AANmB,GAA5B;AAQAvC,EAAAA,mBAAmB,CAAC2C,IAAI,CAACjB,OAAN,EAAeJ,SAAf,CAAnB;AAEA,QAAMsB,oBAAoB,GACxBtB,SAAS,CAACE,QAAV,KAAuBlB,YAAvB,GAAsCgB,SAAS,CAACK,UAAhD,GAA6DL,SAD/D;AAEApB,EAAAA,0BAA0B,CAAC0C,oBAAD,CAA1B;AAEA,SAAOD,IAAP;AACD;;AAED,SAASE,qBAAT,CAA+BC,QAA/B,EAAgDC,UAAhD,EAA0E;AACxE,MAAI1B,OAAJ,EAAa;AACX,QAAIyB,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,UAA7C,EAAyD;AACvDlB,MAAAA,OAAO,CAACC,KAAR,CACE,qEACE,iCAFJ,EAGEkB,UAHF,EAIED,QAJF;AAMD;AACF;AACF;;AAED,SAASE,gCAAT,CACEC,eADF,EAEEC,QAFF,EAGE5B,SAHF,EAIEiB,YAJF,EAKEO,QALF,EAME;AACA,MAAIzB,OAAJ,EAAa;AACXD,IAAAA,sBAAsB,CAACE,SAAD,CAAtB;AACAuB,IAAAA,qBAAqB,CAACC,QAAQ,KAAKK,SAAb,GAAyB,IAAzB,GAAgCL,QAAjC,EAA2C,QAA3C,CAArB;AACD;;AAED,MAAIH,IAAI,GAAGrB,SAAS,CAACC,mBAArB;AACA,MAAI6B,SAAJ;;AACA,MAAI,CAACT,IAAL,EAAW;AACT;AACAA,IAAAA,IAAI,GAAGrB,SAAS,CAACC,mBAAV,GAAgCe,gCAAgC,CACrEhB,SADqE,EAErEiB,YAFqE,CAAvE;AAIAa,IAAAA,SAAS,GAAGT,IAAZ;;AACA,QAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAMO,gBAAgB,GAAGP,QAAzB;;AACAA,MAAAA,QAAQ,GAAG,YAAW;AACpB,cAAMQ,QAAQ,GAAG3C,qBAAqB,CAACyC,SAAD,CAAtC;AACAC,QAAAA,gBAAgB,CAACE,IAAjB,CAAsBD,QAAtB;AACD,OAHD;AAID,KAbQ,CAcT;;;AACA5C,IAAAA,SAAS,CAAC,MAAM;AACdD,MAAAA,eAAe,CAACyC,QAAD,EAAWE,SAAX,EAAsBH,eAAtB,EAAuCH,QAAvC,CAAf;AACD,KAFQ,CAAT;AAGD,GAlBD,MAkBO;AACLM,IAAAA,SAAS,GAAGT,IAAZ;;AACA,QAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAMO,gBAAgB,GAAGP,QAAzB;;AACAA,MAAAA,QAAQ,GAAG,YAAW;AACpB,cAAMQ,QAAQ,GAAG3C,qBAAqB,CAACyC,SAAD,CAAtC;AACAC,QAAAA,gBAAgB,CAACE,IAAjB,CAAsBD,QAAtB;AACD,OAHD;AAID,KARI,CASL;;;AACA7C,IAAAA,eAAe,CAACyC,QAAD,EAAWE,SAAX,EAAsBH,eAAtB,EAAuCH,QAAvC,CAAf;AACD;;AACD,SAAOnC,qBAAqB,CAACyC,SAAD,CAA5B;AACD;;AAED,OAAO,SAASI,WAAT,CACLC,kBADK,EAEkB;AACvB,MAAIpC,OAAJ,EAAa;AACX,UAAMqC,KAAK,GAAIvC,iBAAiB,CAACO,OAAjC;;AACA,QAAIgC,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACC,SAAN,KAAoB,IAA1C,EAAgD;AAC9C,YAAMC,uBAAuB,GAAGF,KAAK,CAACC,SAAN,CAAgBE,wBAAhD;;AACA,UAAI,CAACD,uBAAL,EAA8B;AAC5BhC,QAAAA,OAAO,CAACC,KAAR,CACE,sDACE,mEADF,GAEE,oEAFF,GAGE,iEAHF,GAIE,6BALJ,EAMEd,wBAAwB,CAAC2C,KAAK,CAACI,IAAP,CAAxB,IAAwC,aAN1C;AAQD;;AACDJ,MAAAA,KAAK,CAACC,SAAN,CAAgBE,wBAAhB,GAA2C,IAA3C;AACD;AACF;;AACD,MAAIJ,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,WAAO,IAAP;AACD;;AACD,MAAKA,kBAAD,CAA0BjC,QAA1B,KAAuCnB,YAA3C,EAAyD;AACvD,WAAQoD,kBAAR;AACD;;AACD,MAAIpC,OAAJ,EAAa;AACX,WAAOR,2BAA2B,CAAC4C,kBAAD,EAAqB,aAArB,CAAlC;AACD;;AACD,SAAO7C,gBAAgB,CAAC6C,kBAAD,CAAvB;AACD;AAED,OAAO,SAASM,OAAT,CACLC,OADK,EAEL1C,SAFK,EAGLwB,QAHK,EAIL;AACA,MAAIzB,OAAJ,EAAa;AACXO,IAAAA,OAAO,CAACC,KAAR,CACE,0EACE,oEADF,GAEE,kCAFF,GAGE,qDAJJ;AAMD;;AAED,MAAI,CAAC1B,sBAAsB,CAACmB,SAAD,CAA3B,EAAwC;AACtC,UAAM,IAAI2C,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAI5C,OAAJ,EAAa;AACX,UAAM6C,YAAY,GAChBnE,uBAAuB,CAACuB,SAAD,CAAvB,IACAA,SAAS,CAACC,mBAAV,KAAkC4B,SAFpC;;AAGA,QAAIe,YAAJ,EAAkB;AAChBtC,MAAAA,OAAO,CAACC,KAAR,CACE,2EACE,0DADF,GAEE,uDAHJ;AAKD;AACF,GAzBD,CA0BA;;;AACA,SAAOmB,gCAAgC,CACrC,IADqC,EAErCgB,OAFqC,EAGrC1C,SAHqC,EAIrC,IAJqC,EAKrCwB,QALqC,CAAvC;AAOD;AAED,OAAO,SAASqB,MAAT,CACLH,OADK,EAEL1C,SAFK,EAGLwB,QAHK,EAIL;AACA,MAAIzB,OAAJ,EAAa;AACXO,IAAAA,OAAO,CAACC,KAAR,CACE,wEACE,oEADF,GAEE,kCAFF,GAGE,qDAJJ;AAMD;;AAED,MAAI,CAAC1B,sBAAsB,CAACmB,SAAD,CAA3B,EAAwC;AACtC,UAAM,IAAI2C,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAI5C,OAAJ,EAAa;AACX,UAAM6C,YAAY,GAChBnE,uBAAuB,CAACuB,SAAD,CAAvB,IACAA,SAAS,CAACC,mBAAV,KAAkC4B,SAFpC;;AAGA,QAAIe,YAAJ,EAAkB;AAChBtC,MAAAA,OAAO,CAACC,KAAR,CACE,0EACE,0DADF,GAEE,4CAHJ;AAKD;AACF;;AACD,SAAOmB,gCAAgC,CACrC,IADqC,EAErCgB,OAFqC,EAGrC1C,SAHqC,EAIrC,KAJqC,EAKrCwB,QALqC,CAAvC;AAOD;AAED,OAAO,SAASsB,mCAAT,CACLnB,eADK,EAELe,OAFK,EAGLK,aAHK,EAILvB,QAJK,EAKL;AACA,MAAI,CAAC3C,sBAAsB,CAACkE,aAAD,CAA3B,EAA4C;AAC1C,UAAM,IAAIJ,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAIhB,eAAe,IAAI,IAAnB,IAA2B,CAAC/B,WAAW,CAAC+B,eAAD,CAA3C,EAA8D;AAC5D,UAAM,IAAIgB,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,SAAOjB,gCAAgC,CACrCC,eADqC,EAErCe,OAFqC,EAGrCK,aAHqC,EAIrC,KAJqC,EAKrCvB,QALqC,CAAvC;AAOD;AAED,OAAO,SAASwB,sBAAT,CAAgChD,SAAhC,EAAsD;AAC3D,MAAI,CAACnB,sBAAsB,CAACmB,SAAD,CAA3B,EAAwC;AACtC,UAAM,IAAI2C,KAAJ,CACJ,qEADI,CAAN;AAGD;;AAED,MAAI5C,OAAJ,EAAa;AACX,UAAM6C,YAAY,GAChBnE,uBAAuB,CAACuB,SAAD,CAAvB,IACAA,SAAS,CAACC,mBAAV,KAAkC4B,SAFpC;;AAGA,QAAIe,YAAJ,EAAkB;AAChBtC,MAAAA,OAAO,CAACC,KAAR,CACE,0FACE,8FAFJ;AAID;AACF;;AAED,MAAIP,SAAS,CAACC,mBAAd,EAAmC;AACjC,QAAIF,OAAJ,EAAa;AACX,YAAMU,MAAM,GAAGC,8BAA8B,CAACV,SAAD,CAA7C;AACA,YAAMiD,wBAAwB,GAAGxC,MAAM,IAAI,CAACjC,mBAAmB,CAACiC,MAAD,CAA/D;;AACA,UAAIwC,wBAAJ,EAA8B;AAC5B3C,QAAAA,OAAO,CAACC,KAAR,CACE,qEACE,wCAFJ;AAID;AACF,KAVgC,CAYjC;;;AACAnB,IAAAA,SAAS,CAAC,MAAM;AACdsC,MAAAA,gCAAgC,CAAC,IAAD,EAAO,IAAP,EAAa1B,SAAb,EAAwB,KAAxB,EAA+B,MAAM;AACnE;AACAA,QAAAA,SAAS,CAACC,mBAAV,GAAgC,IAAhC;AACAtB,QAAAA,qBAAqB,CAACqB,SAAD,CAArB;AACD,OAJ+B,CAAhC;AAKD,KANQ,CAAT,CAbiC,CAoBjC;AACA;;AACA,WAAO,IAAP;AACD,GAvBD,MAuBO;AACL,QAAID,OAAJ,EAAa;AACX,YAAMU,MAAM,GAAGC,8BAA8B,CAACV,SAAD,CAA7C;AACA,YAAMW,oBAAoB,GAAG,CAAC,EAAEF,MAAM,IAAIjC,mBAAmB,CAACiC,MAAD,CAA/B,CAA9B,CAFW,CAIX;;AACA,YAAMyC,oBAAoB,GACxBlD,SAAS,CAACE,QAAV,KAAuBnB,YAAvB,IACAF,sBAAsB,CAACmB,SAAS,CAACK,UAAX,CADtB,IAEA,CAAC,CAACL,SAAS,CAACK,UAAV,CAAqBJ,mBAHzB;;AAKA,UAAIU,oBAAJ,EAA0B;AACxBL,QAAAA,OAAO,CAACC,KAAR,CACE,qEACE,4DAFJ,EAGE2C,oBAAoB,GAChB,mEACE,mBAFc,GAGhB,6DACE,6CAPR;AASD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Container} from './ReactDOMHostConfig';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  getInstanceFromNode,\n  isContainerMarkedAsRoot,\n  markContainerAsRoot,\n  unmarkContainerAsRoot,\n} from './ReactDOMComponentTree';\nimport {listenToAllSupportedEvents} from '../events/DOMPluginEventSystem';\nimport {isValidContainerLegacy} from './ReactDOMRoot';\nimport {\n  DOCUMENT_NODE,\n  ELEMENT_NODE,\n  COMMENT_NODE,\n} from '../shared/HTMLNodeType';\n\nimport {\n  createContainer,\n  findHostInstanceWithNoPortals,\n  updateContainer,\n  flushSync,\n  getPublicRootInstance,\n  findHostInstance,\n  findHostInstanceWithWarning,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {has as hasInstance} from 'shared/ReactInstanceMap';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet topLevelUpdateWarnings;\n\nif (__DEV__) {\n  topLevelUpdateWarnings = (container: Container) => {\n    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\n      const hostInstance = findHostInstanceWithNoPortals(\n        container._reactRootContainer.current,\n      );\n      if (hostInstance) {\n        if (hostInstance.parentNode !== container) {\n          console.error(\n            'render(...): It looks like the React-rendered content of this ' +\n              'container was removed without using React. This is not ' +\n              'supported and will cause errors. Instead, call ' +\n              'ReactDOM.unmountComponentAtNode to empty a container.',\n          );\n        }\n      }\n    }\n\n    const isRootRenderedBySomeReact = !!container._reactRootContainer;\n    const rootEl = getReactRootElementInContainer(container);\n    const hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\n\n    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {\n      console.error(\n        'render(...): Replacing React-rendered children with a new root ' +\n          'component. If you intended to update the children of this node, ' +\n          'you should instead have the existing children update their state ' +\n          'and render the new components instead of calling ReactDOM.render.',\n      );\n    }\n\n    if (\n      container.nodeType === ELEMENT_NODE &&\n      ((container: any): Element).tagName &&\n      ((container: any): Element).tagName.toUpperCase() === 'BODY'\n    ) {\n      console.error(\n        'render(): Rendering components directly into document.body is ' +\n          'discouraged, since its children are often manipulated by third-party ' +\n          'scripts and browser extensions. This may lead to subtle ' +\n          'reconciliation issues. Try rendering into a container element created ' +\n          'for your app.',\n      );\n    }\n  };\n}\n\nfunction getReactRootElementInContainer(container: any) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction legacyCreateRootFromDOMContainer(\n  container: Container,\n  forceHydrate: boolean,\n): FiberRoot {\n  // First clear any existing content.\n  if (!forceHydrate) {\n    let rootSibling;\n    while ((rootSibling = container.lastChild)) {\n      container.removeChild(rootSibling);\n    }\n  }\n\n  const root = createContainer(\n    container,\n    LegacyRoot,\n    forceHydrate,\n    null, // hydrationCallbacks\n    false, // isStrictMode\n    false, // concurrentUpdatesByDefaultOverride,\n  );\n  markContainerAsRoot(root.current, container);\n\n  const rootContainerElement =\n    container.nodeType === COMMENT_NODE ? container.parentNode : container;\n  listenToAllSupportedEvents(rootContainerElement);\n\n  return root;\n}\n\nfunction warnOnInvalidCallback(callback: mixed, callerName: string): void {\n  if (__DEV__) {\n    if (callback !== null && typeof callback !== 'function') {\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  }\n}\n\nfunction legacyRenderSubtreeIntoContainer(\n  parentComponent: ?React$Component<any, any>,\n  children: ReactNodeList,\n  container: Container,\n  forceHydrate: boolean,\n  callback: ?Function,\n) {\n  if (__DEV__) {\n    topLevelUpdateWarnings(container);\n    warnOnInvalidCallback(callback === undefined ? null : callback, 'render');\n  }\n\n  let root = container._reactRootContainer;\n  let fiberRoot: FiberRoot;\n  if (!root) {\n    // Initial mount\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n      container,\n      forceHydrate,\n    );\n    fiberRoot = root;\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n      callback = function() {\n        const instance = getPublicRootInstance(fiberRoot);\n        originalCallback.call(instance);\n      };\n    }\n    // Initial mount should not be batched.\n    flushSync(() => {\n      updateContainer(children, fiberRoot, parentComponent, callback);\n    });\n  } else {\n    fiberRoot = root;\n    if (typeof callback === 'function') {\n      const originalCallback = callback;\n      callback = function() {\n        const instance = getPublicRootInstance(fiberRoot);\n        originalCallback.call(instance);\n      };\n    }\n    // Update\n    updateContainer(children, fiberRoot, parentComponent, callback);\n  }\n  return getPublicRootInstance(fiberRoot);\n}\n\nexport function findDOMNode(\n  componentOrElement: Element | ?React$Component<any, any>,\n): null | Element | Text {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.stateNode !== null) {\n      const warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n      if (!warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing findDOMNode inside its render(). ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromType(owner.type) || 'A component',\n        );\n      }\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if ((componentOrElement: any).nodeType === ELEMENT_NODE) {\n    return (componentOrElement: any);\n  }\n  if (__DEV__) {\n    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');\n  }\n  return findHostInstance(componentOrElement);\n}\n\nexport function hydrate(\n  element: React$Node,\n  container: Container,\n  callback: ?Function,\n) {\n  if (__DEV__) {\n    console.error(\n      'ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' +\n        'instead. Until you switch to the new API, your app will behave as ' +\n        \"if it's running React 17. Learn \" +\n        'more: https://reactjs.org/link/switch-to-createroot',\n    );\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (__DEV__) {\n    const isModernRoot =\n      isContainerMarkedAsRoot(container) &&\n      container._reactRootContainer === undefined;\n    if (isModernRoot) {\n      console.error(\n        'You are calling ReactDOM.hydrate() on a container that was previously ' +\n          'passed to ReactDOM.createRoot(). This is not supported. ' +\n          'Did you mean to call hydrateRoot(container, element)?',\n      );\n    }\n  }\n  // TODO: throw or warn if we couldn't hydrate?\n  return legacyRenderSubtreeIntoContainer(\n    null,\n    element,\n    container,\n    true,\n    callback,\n  );\n}\n\nexport function render(\n  element: React$Element<any>,\n  container: Container,\n  callback: ?Function,\n) {\n  if (__DEV__) {\n    console.error(\n      'ReactDOM.render is no longer supported in React 18. Use createRoot ' +\n        'instead. Until you switch to the new API, your app will behave as ' +\n        \"if it's running React 17. Learn \" +\n        'more: https://reactjs.org/link/switch-to-createroot',\n    );\n  }\n\n  if (!isValidContainerLegacy(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (__DEV__) {\n    const isModernRoot =\n      isContainerMarkedAsRoot(container) &&\n      container._reactRootContainer === undefined;\n    if (isModernRoot) {\n      console.error(\n        'You are calling ReactDOM.render() on a container that was previously ' +\n          'passed to ReactDOM.createRoot(). This is not supported. ' +\n          'Did you mean to call root.render(element)?',\n      );\n    }\n  }\n  return legacyRenderSubtreeIntoContainer(\n    null,\n    element,\n    container,\n    false,\n    callback,\n  );\n}\n\nexport function unstable_renderSubtreeIntoContainer(\n  parentComponent: React$Component<any, any>,\n  element: React$Element<any>,\n  containerNode: Container,\n  callback: ?Function,\n) {\n  if (!isValidContainerLegacy(containerNode)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  if (parentComponent == null || !hasInstance(parentComponent)) {\n    throw new Error('parentComponent must be a valid React Component');\n  }\n\n  return legacyRenderSubtreeIntoContainer(\n    parentComponent,\n    element,\n    containerNode,\n    false,\n    callback,\n  );\n}\n\nexport function unmountComponentAtNode(container: Container) {\n  if (!isValidContainerLegacy(container)) {\n    throw new Error(\n      'unmountComponentAtNode(...): Target container is not a DOM element.',\n    );\n  }\n\n  if (__DEV__) {\n    const isModernRoot =\n      isContainerMarkedAsRoot(container) &&\n      container._reactRootContainer === undefined;\n    if (isModernRoot) {\n      console.error(\n        'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' +\n          'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?',\n      );\n    }\n  }\n\n  if (container._reactRootContainer) {\n    if (__DEV__) {\n      const rootEl = getReactRootElementInContainer(container);\n      const renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);\n      if (renderedByDifferentReact) {\n        console.error(\n          \"unmountComponentAtNode(): The node you're attempting to unmount \" +\n            'was rendered by another copy of React.',\n        );\n      }\n    }\n\n    // Unmount should not be batched.\n    flushSync(() => {\n      legacyRenderSubtreeIntoContainer(null, null, container, false, () => {\n        // $FlowFixMe This should probably use `delete container._reactRootContainer`\n        container._reactRootContainer = null;\n        unmarkContainerAsRoot(container);\n      });\n    });\n    // If you call unmountComponentAtNode twice in quick succession, you'll\n    // get `true` twice. That's probably fine?\n    return true;\n  } else {\n    if (__DEV__) {\n      const rootEl = getReactRootElementInContainer(container);\n      const hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\n\n      // Check if the container itself is a React root node.\n      const isContainerReactRoot =\n        container.nodeType === ELEMENT_NODE &&\n        isValidContainerLegacy(container.parentNode) &&\n        !!container.parentNode._reactRootContainer;\n\n      if (hasNonRootReactChild) {\n        console.error(\n          \"unmountComponentAtNode(): The node you're attempting to unmount \" +\n            'was rendered by React and is not a top-level container. %s',\n          isContainerReactRoot\n            ? 'You may have accidentally passed in a React root node instead ' +\n                'of its container.'\n            : 'Instead, have the parent component update its state and ' +\n                'rerender in order to remove this component.',\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}