{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { SyntheticEvent, SyntheticKeyboardEvent, SyntheticFocusEvent, SyntheticMouseEvent, SyntheticDragEvent, SyntheticTouchEvent, SyntheticAnimationEvent, SyntheticTransitionEvent, SyntheticUIEvent, SyntheticWheelEvent, SyntheticClipboardEvent, SyntheticPointerEvent } from '../../events/SyntheticEvent';\nimport { ANIMATION_END, ANIMATION_ITERATION, ANIMATION_START, TRANSITION_END } from '../DOMEventNames';\nimport { topLevelEventsToReactNames, registerSimpleEvents } from '../DOMEventProperties';\nimport { accumulateSinglePhaseListeners, accumulateEventHandleNonManagedNodeListeners } from '../DOMPluginEventSystem';\nimport { IS_EVENT_HANDLE_NON_MANAGED_NODE } from '../EventSystemFlags';\nimport getEventCharCode from '../getEventCharCode';\nimport { IS_CAPTURE_PHASE } from '../EventSystemFlags';\nimport { enableCreateEventHandleAPI } from 'shared/ReactFeatureFlags';\n\nfunction extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\n  const reactName = topLevelEventsToReactNames.get(domEventName);\n\n  if (reactName === undefined) {\n    return;\n  }\n\n  let SyntheticEventCtor = SyntheticEvent;\n  let reactEventType = domEventName;\n\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      if (getEventCharCode(nativeEvent) === 0) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n\n    /* falls through */\n\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup': // TODO: Disabled elements should not respond to mouse events\n\n    /* falls through */\n\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n\n    case 'scroll':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n\n    default:\n      // Unknown event. This is used by createEventHandle.\n      break;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  if (enableCreateEventHandleAPI && eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) {\n    const listeners = accumulateEventHandleNonManagedNodeListeners( // TODO: this cast may not make sense for events like\n    // \"focus\" where React listens to e.g. \"focusin\".\n    reactEventType, targetContainer, inCapturePhase);\n\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n    }\n  } else {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    const accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from\n    // nonDelegatedEvents list in DOMPluginEventSystem.\n    // Then we can remove this special list.\n    // This is a breaking change that can wait until React 18.\n    domEventName === 'scroll';\n    const listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly, nativeEvent);\n\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\n      dispatchQueue.push({\n        event,\n        listeners\n      });\n    }\n  }\n}\n\nexport { registerSimpleEvents as registerEvents, extractEvents };","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-dom/src/events/plugins/SimpleEventPlugin.js"],"names":["SyntheticEvent","SyntheticKeyboardEvent","SyntheticFocusEvent","SyntheticMouseEvent","SyntheticDragEvent","SyntheticTouchEvent","SyntheticAnimationEvent","SyntheticTransitionEvent","SyntheticUIEvent","SyntheticWheelEvent","SyntheticClipboardEvent","SyntheticPointerEvent","ANIMATION_END","ANIMATION_ITERATION","ANIMATION_START","TRANSITION_END","topLevelEventsToReactNames","registerSimpleEvents","accumulateSinglePhaseListeners","accumulateEventHandleNonManagedNodeListeners","IS_EVENT_HANDLE_NON_MANAGED_NODE","getEventCharCode","IS_CAPTURE_PHASE","enableCreateEventHandleAPI","extractEvents","dispatchQueue","domEventName","targetInst","nativeEvent","nativeEventTarget","eventSystemFlags","targetContainer","reactName","get","undefined","SyntheticEventCtor","reactEventType","button","inCapturePhase","listeners","length","event","push","accumulateTargetOnly","type","registerEvents"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {DOMEventName} from '../../events/DOMEventNames';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {AnyNativeEvent} from '../../events/PluginModuleType';\nimport type {DispatchQueue} from '../DOMPluginEventSystem';\nimport type {EventSystemFlags} from '../EventSystemFlags';\n\nimport {\n  SyntheticEvent,\n  SyntheticKeyboardEvent,\n  SyntheticFocusEvent,\n  SyntheticMouseEvent,\n  SyntheticDragEvent,\n  SyntheticTouchEvent,\n  SyntheticAnimationEvent,\n  SyntheticTransitionEvent,\n  SyntheticUIEvent,\n  SyntheticWheelEvent,\n  SyntheticClipboardEvent,\n  SyntheticPointerEvent,\n} from '../../events/SyntheticEvent';\n\nimport {\n  ANIMATION_END,\n  ANIMATION_ITERATION,\n  ANIMATION_START,\n  TRANSITION_END,\n} from '../DOMEventNames';\nimport {\n  topLevelEventsToReactNames,\n  registerSimpleEvents,\n} from '../DOMEventProperties';\nimport {\n  accumulateSinglePhaseListeners,\n  accumulateEventHandleNonManagedNodeListeners,\n} from '../DOMPluginEventSystem';\nimport {IS_EVENT_HANDLE_NON_MANAGED_NODE} from '../EventSystemFlags';\n\nimport getEventCharCode from '../getEventCharCode';\nimport {IS_CAPTURE_PHASE} from '../EventSystemFlags';\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nfunction extractEvents(\n  dispatchQueue: DispatchQueue,\n  domEventName: DOMEventName,\n  targetInst: null | Fiber,\n  nativeEvent: AnyNativeEvent,\n  nativeEventTarget: null | EventTarget,\n  eventSystemFlags: EventSystemFlags,\n  targetContainer: EventTarget,\n): void {\n  const reactName = topLevelEventsToReactNames.get(domEventName);\n  if (reactName === undefined) {\n    return;\n  }\n  let SyntheticEventCtor = SyntheticEvent;\n  let reactEventType: string = domEventName;\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      if (getEventCharCode(((nativeEvent: any): KeyboardEvent)) === 0) {\n        return;\n      }\n    /* falls through */\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n    /* falls through */\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup':\n    // TODO: Disabled elements should not respond to mouse events\n    /* falls through */\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n    case 'scroll':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n    default:\n      // Unknown event. This is used by createEventHandle.\n      break;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n  if (\n    enableCreateEventHandleAPI &&\n    eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE\n  ) {\n    const listeners = accumulateEventHandleNonManagedNodeListeners(\n      // TODO: this cast may not make sense for events like\n      // \"focus\" where React listens to e.g. \"focusin\".\n      ((reactEventType: any): DOMEventName),\n      targetContainer,\n      inCapturePhase,\n    );\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(\n        reactName,\n        reactEventType,\n        null,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      dispatchQueue.push({event, listeners});\n    }\n  } else {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    const accumulateTargetOnly =\n      !inCapturePhase &&\n      // TODO: ideally, we'd eventually add all events from\n      // nonDelegatedEvents list in DOMPluginEventSystem.\n      // Then we can remove this special list.\n      // This is a breaking change that can wait until React 18.\n      domEventName === 'scroll';\n\n    const listeners = accumulateSinglePhaseListeners(\n      targetInst,\n      reactName,\n      nativeEvent.type,\n      inCapturePhase,\n      accumulateTargetOnly,\n      nativeEvent,\n    );\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event = new SyntheticEventCtor(\n        reactName,\n        reactEventType,\n        null,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      dispatchQueue.push({event, listeners});\n    }\n  }\n}\n\nexport {registerSimpleEvents as registerEvents, extractEvents};\n"]},"metadata":{},"sourceType":"module"}