{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n// This prevents e.g. <img src=\"\"> from making an unnecessary HTTP request for certain browsers.\nexport const enableFilterEmptyStringAttributesDOM = false; // Adds verbose console logging for e.g. state updates, suspense, and work loop stuff.\n// Intended to enable React core members to more easily debug scheduling issues in DEV builds.\n\nexport const enableDebugTracing = false; // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nexport const enableSchedulingProfiler = __PROFILE__; // Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in StrictLegacyMode.\n\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__; // Helps identify code that is not safe for planned Offscreen API and Suspense semantics;\n// this feature flag only impacts StrictEffectsMode.\n\nexport const enableStrictEffects = __DEV__; // If TRUE, trees rendered with createRoot will be StrictEffectsMode.\n// If FALSE, these trees will be StrictLegacyMode.\n\nexport const createRootStrictEffectsByDefault = false; // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\nexport const warnAboutDeprecatedLifecycles = true; // Gather advanced timing metrics for Profiler subtrees.\n\nexport const enableProfilerTimer = __PROFILE__; // Record durations for commit and passive effects phases.\n\nexport const enableProfilerCommitHooks = __PROFILE__; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nexport const enableProfilerNestedUpdatePhase = __PROFILE__; // Profiler API accepts a function to be called when a nested update is scheduled.\n// This callback accepts the component type (class instance or function) the update is scheduled for.\n\nexport const enableProfilerNestedUpdateScheduledHook = false; // Track which Fiber(s) schedule render work.\n\nexport const enableUpdaterTracking = __PROFILE__; // SSR experiments\n\nexport const enableSuspenseServerRenderer = true;\nexport const enableSelectiveHydration = true; // Flight experiments\n\nexport const enableLazyElements = true;\nexport const enableCache = __EXPERIMENTAL__; // Only used in www builds.\n\nexport const enableSchedulerDebugging = false; // Disable javascript: URL strings in href for XSS protection.\n\nexport const disableJavaScriptURLs = false; // Experimental Scope support.\n\nexport const enableScopeAPI = false; // Experimental Create Event Handle API.\n\nexport const enableCreateEventHandleAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n// We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v18?)\n// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n\nexport const enableSuspenseCallback = false; // Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false; // Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\n\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const warnOnSubscriptionInsideStartTransition = false;\nexport const enableSuspenseAvoidThisFallback = false;\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = false;\nexport const enableComponentStackLocations = true;\nexport const enableNewReconciler = false;\nexport const disableNativeComponentFrames = false; // Internal only.\n\nexport const enableGetInspectorDataForInstanceInProduction = false; // Errors that are thrown while unmounting (or after in the case of passive effects)\n// should bypass any error boundaries that are also unmounting (or have unmounted)\n// and be handled by the nearest still-mounted boundary.\n// If there are no still-mounted boundaries, the errors should be rethrown.\n\nexport const skipUnmountedBoundaries = false; // When a node is unmounted, recurse into the Fiber subtree and clean out\n// references. Each level cleans up more fiber fields than the previous level.\n// As far as we know, React itself doesn't leak, but because the Fiber contains\n// cycles, even a single leak in product code can cause us to retain large\n// amounts of memory.\n//\n// The long term plan is to remove the cycles, but in the meantime, we clear\n// additional fields to mitigate.\n//\n// It's an enum so that we can experiment with different levels of\n// aggressiveness.\n\nexport const deletedTreeCleanUpLevel = 3; // Destroy layout effects for components that are hidden because something suspended in an update\n// and recreate them when they are shown again (after the suspended boundary has resolved).\n// Note that this should be an uncommon use case and can be avoided by using the transition API.\n\nexport const enableSuspenseLayoutEffectSemantics = true; // --------------------------\n// Future APIs to be deprecated\n// --------------------------\n// Prevent the value and checked attributes from syncing\n// with their related DOM properties\n\nexport const disableInputAttributeSyncing = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false; // Disables children for <textarea> elements\n\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false; // We should remove this flag once the above flag becomes enabled\n\nexport const warnUnstableRenderSubtreeIntoContainer = false; // Support legacy Primer support on internal FB www\n\nexport const enableLegacyFBSupport = false; // Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\n\nexport const deferRenderPhaseUpdateToNextBatch = false;\nexport const enableUseRefAccessWarning = false;\nexport const warnAboutCallbackRefReturningFunction = false;\nexport const enableRecursiveCommitTraversal = false;\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = false;\nexport const enablePersistentOffscreenHostContainer = false;\nexport const consoleManagedByDevToolsDuringStrictMode = true; // Only enabled in www builds\n\nexport const enableUseMutableSource = false;","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/shared/ReactFeatureFlags.js"],"names":["enableFilterEmptyStringAttributesDOM","enableDebugTracing","enableSchedulingProfiler","__PROFILE__","debugRenderPhaseSideEffectsForStrictMode","__DEV__","enableStrictEffects","createRootStrictEffectsByDefault","replayFailedUnitOfWorkWithInvokeGuardedCallback","warnAboutDeprecatedLifecycles","enableProfilerTimer","enableProfilerCommitHooks","enableProfilerNestedUpdatePhase","enableProfilerNestedUpdateScheduledHook","enableUpdaterTracking","enableSuspenseServerRenderer","enableSelectiveHydration","enableLazyElements","enableCache","__EXPERIMENTAL__","enableSchedulerDebugging","disableJavaScriptURLs","enableScopeAPI","enableCreateEventHandleAPI","enableSuspenseCallback","warnAboutDefaultPropsOnFunctionComponents","disableSchedulerTimeoutBasedOnReactExpirationTime","enableTrustedTypesIntegration","warnAboutSpreadingKeyToJSX","warnOnSubscriptionInsideStartTransition","enableSuspenseAvoidThisFallback","enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay","enableComponentStackLocations","enableNewReconciler","disableNativeComponentFrames","enableGetInspectorDataForInstanceInProduction","skipUnmountedBoundaries","deletedTreeCleanUpLevel","enableSuspenseLayoutEffectSemantics","disableInputAttributeSyncing","warnAboutStringRefs","disableLegacyContext","disableTextareaChildren","disableModulePatternComponents","warnUnstableRenderSubtreeIntoContainer","enableLegacyFBSupport","deferRenderPhaseUpdateToNextBatch","enableUseRefAccessWarning","warnAboutCallbackRefReturningFunction","enableRecursiveCommitTraversal","disableSchedulerTimeoutInWorkLoop","enableLazyContextPropagation","enableSyncDefaultUpdates","allowConcurrentByDefault","enablePersistentOffscreenHostContainer","consoleManagedByDevToolsDuringStrictMode","enableUseMutableSource"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n// This prevents e.g. <img src=\"\"> from making an unnecessary HTTP request for certain browsers.\nexport const enableFilterEmptyStringAttributesDOM = false;\n\n// Adds verbose console logging for e.g. state updates, suspense, and work loop stuff.\n// Intended to enable React core members to more easily debug scheduling issues in DEV builds.\nexport const enableDebugTracing = false;\n\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\nexport const enableSchedulingProfiler = __PROFILE__;\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in StrictLegacyMode.\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n\n// Helps identify code that is not safe for planned Offscreen API and Suspense semantics;\n// this feature flag only impacts StrictEffectsMode.\nexport const enableStrictEffects = __DEV__;\n\n// If TRUE, trees rendered with createRoot will be StrictEffectsMode.\n// If FALSE, these trees will be StrictLegacyMode.\nexport const createRootStrictEffectsByDefault = false;\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\n\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\nexport const warnAboutDeprecatedLifecycles = true;\n\n// Gather advanced timing metrics for Profiler subtrees.\nexport const enableProfilerTimer = __PROFILE__;\n\n// Record durations for commit and passive effects phases.\nexport const enableProfilerCommitHooks = __PROFILE__;\n\n// Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\n\n// Profiler API accepts a function to be called when a nested update is scheduled.\n// This callback accepts the component type (class instance or function) the update is scheduled for.\nexport const enableProfilerNestedUpdateScheduledHook = false;\n\n// Track which Fiber(s) schedule render work.\nexport const enableUpdaterTracking = __PROFILE__;\n\n// SSR experiments\nexport const enableSuspenseServerRenderer = true;\nexport const enableSelectiveHydration = true;\n\n// Flight experiments\nexport const enableLazyElements = true;\nexport const enableCache = __EXPERIMENTAL__;\n\n// Only used in www builds.\nexport const enableSchedulerDebugging = false;\n\n// Disable javascript: URL strings in href for XSS protection.\nexport const disableJavaScriptURLs = false;\n\n// Experimental Scope support.\nexport const enableScopeAPI = false;\n\n// Experimental Create Event Handle API.\nexport const enableCreateEventHandleAPI = false;\n\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\n// We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v18?)\n// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version\n\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\nexport const enableSuspenseCallback = false;\n\n// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\n\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\n\nexport const enableTrustedTypesIntegration = false;\n\n// Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\nexport const warnAboutSpreadingKeyToJSX = false;\n\nexport const warnOnSubscriptionInsideStartTransition = false;\n\nexport const enableSuspenseAvoidThisFallback = false;\n\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = false;\n\nexport const enableComponentStackLocations = true;\n\nexport const enableNewReconciler = false;\n\nexport const disableNativeComponentFrames = false;\n\n// Internal only.\nexport const enableGetInspectorDataForInstanceInProduction = false;\n\n// Errors that are thrown while unmounting (or after in the case of passive effects)\n// should bypass any error boundaries that are also unmounting (or have unmounted)\n// and be handled by the nearest still-mounted boundary.\n// If there are no still-mounted boundaries, the errors should be rethrown.\nexport const skipUnmountedBoundaries = false;\n\n// When a node is unmounted, recurse into the Fiber subtree and clean out\n// references. Each level cleans up more fiber fields than the previous level.\n// As far as we know, React itself doesn't leak, but because the Fiber contains\n// cycles, even a single leak in product code can cause us to retain large\n// amounts of memory.\n//\n// The long term plan is to remove the cycles, but in the meantime, we clear\n// additional fields to mitigate.\n//\n// It's an enum so that we can experiment with different levels of\n// aggressiveness.\nexport const deletedTreeCleanUpLevel = 3;\n\n// Destroy layout effects for components that are hidden because something suspended in an update\n// and recreate them when they are shown again (after the suspended boundary has resolved).\n// Note that this should be an uncommon use case and can be avoided by using the transition API.\nexport const enableSuspenseLayoutEffectSemantics = true;\n\n// --------------------------\n// Future APIs to be deprecated\n// --------------------------\n\n// Prevent the value and checked attributes from syncing\n// with their related DOM properties\nexport const disableInputAttributeSyncing = false;\n\nexport const warnAboutStringRefs = false;\n\nexport const disableLegacyContext = false;\n\n// Disables children for <textarea> elements\nexport const disableTextareaChildren = false;\n\nexport const disableModulePatternComponents = false;\n\n// We should remove this flag once the above flag becomes enabled\nexport const warnUnstableRenderSubtreeIntoContainer = false;\n\n// Support legacy Primer support on internal FB www\nexport const enableLegacyFBSupport = false;\n\n// Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\nexport const enableUseRefAccessWarning = false;\n\nexport const warnAboutCallbackRefReturningFunction = false;\n\nexport const enableRecursiveCommitTraversal = false;\n\nexport const disableSchedulerTimeoutInWorkLoop = false;\n\nexport const enableLazyContextPropagation = false;\n\nexport const enableSyncDefaultUpdates = true;\n\nexport const allowConcurrentByDefault = false;\n\nexport const enablePersistentOffscreenHostContainer = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = true;\n\n// Only enabled in www builds\nexport const enableUseMutableSource = false;\n"]},"metadata":{},"sourceType":"module"}