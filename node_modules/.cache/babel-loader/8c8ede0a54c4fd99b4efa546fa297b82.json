{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ATTRIBUTE_NAME_CHAR } from './DOMProperty';\nimport isCustomComponent from './isCustomComponent';\nimport validAriaProperties from './validAriaProperties';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nconst warnedProperties = {};\nconst rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nconst rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty(tagName, name) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    if (rARIACamel.test(name)) {\n      const ariaName = 'aria-' + name.slice(4).toLowerCase();\n      const correctName = validAriaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (correctName == null) {\n        console.error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\n        warnedProperties[name] = true;\n        return true;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== correctName) {\n        console.error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA.test(name)) {\n      const lowerCasedName = name.toLowerCase();\n      const standardName = validAriaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (standardName == null) {\n        warnedProperties[name] = true;\n        return false;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== standardName) {\n        console.error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  if (__DEV__) {\n    const invalidProps = [];\n\n    for (const key in props) {\n      const isValid = validateProperty(type, key);\n\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    const unknownPropString = invalidProps.map(prop => '`' + prop + '`').join(', ');\n\n    if (invalidProps.length === 1) {\n      console.error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    } else if (invalidProps.length > 1) {\n      console.error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    }\n  }\n}\n\nexport function validateProperties(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnInvalidARIAProps(type, props);\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/shared/ReactDOMInvalidARIAHook.js"],"names":["ATTRIBUTE_NAME_CHAR","isCustomComponent","validAriaProperties","hasOwnProperty","warnedProperties","rARIA","RegExp","rARIACamel","validateProperty","tagName","name","__DEV__","call","test","ariaName","slice","toLowerCase","correctName","console","error","lowerCasedName","standardName","warnInvalidARIAProps","type","props","invalidProps","key","isValid","push","unknownPropString","map","prop","join","length","validateProperties"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {ATTRIBUTE_NAME_CHAR} from './DOMProperty';\nimport isCustomComponent from './isCustomComponent';\nimport validAriaProperties from './validAriaProperties';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst warnedProperties = {};\nconst rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nconst rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty(tagName, name) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    if (rARIACamel.test(name)) {\n      const ariaName = 'aria-' + name.slice(4).toLowerCase();\n      const correctName = validAriaProperties.hasOwnProperty(ariaName)\n        ? ariaName\n        : null;\n\n      // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n      if (correctName == null) {\n        console.error(\n          'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',\n          name,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n      // aria-* attributes should be lowercase; suggest the lowercase version.\n      if (name !== correctName) {\n        console.error(\n          'Invalid ARIA attribute `%s`. Did you mean `%s`?',\n          name,\n          correctName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA.test(name)) {\n      const lowerCasedName = name.toLowerCase();\n      const standardName = validAriaProperties.hasOwnProperty(lowerCasedName)\n        ? lowerCasedName\n        : null;\n\n      // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n      if (standardName == null) {\n        warnedProperties[name] = true;\n        return false;\n      }\n      // aria-* attributes should be lowercase; suggest the lowercase version.\n      if (name !== standardName) {\n        console.error(\n          'Unknown ARIA attribute `%s`. Did you mean `%s`?',\n          name,\n          standardName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  if (__DEV__) {\n    const invalidProps = [];\n\n    for (const key in props) {\n      const isValid = validateProperty(type, key);\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    const unknownPropString = invalidProps\n      .map(prop => '`' + prop + '`')\n      .join(', ');\n\n    if (invalidProps.length === 1) {\n      console.error(\n        'Invalid aria prop %s on <%s> tag. ' +\n          'For details, see https://reactjs.org/link/invalid-aria-props',\n        unknownPropString,\n        type,\n      );\n    } else if (invalidProps.length > 1) {\n      console.error(\n        'Invalid aria props %s on <%s> tag. ' +\n          'For details, see https://reactjs.org/link/invalid-aria-props',\n        unknownPropString,\n        type,\n      );\n    }\n  }\n}\n\nexport function validateProperties(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n  warnInvalidARIAProps(type, props);\n}\n"]},"metadata":{},"sourceType":"module"}