{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { TEXT_NODE } from '../shared/HTMLNodeType';\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\n\nconst setTextContent = function (node, text) {\n  if (text) {\n    const firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n\n  node.textContent = text;\n};\n\nexport default setTextContent;","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-dom/src/client/setTextContent.js"],"names":["TEXT_NODE","setTextContent","node","text","firstChild","lastChild","nodeType","nodeValue","textContent"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,SAAR,QAAwB,wBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,UAASC,IAAT,EAAwBC,IAAxB,EAA4C;AACjE,MAAIA,IAAJ,EAAU;AACR,UAAMC,UAAU,GAAGF,IAAI,CAACE,UAAxB;;AAEA,QACEA,UAAU,IACVA,UAAU,KAAKF,IAAI,CAACG,SADpB,IAEAD,UAAU,CAACE,QAAX,KAAwBN,SAH1B,EAIE;AACAI,MAAAA,UAAU,CAACG,SAAX,GAAuBJ,IAAvB;AACA;AACD;AACF;;AACDD,EAAAA,IAAI,CAACM,WAAL,GAAmBL,IAAnB;AACD,CAdD;;AAgBA,eAAeF,cAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {TEXT_NODE} from '../shared/HTMLNodeType';\n\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nconst setTextContent = function(node: Element, text: string): void {\n  if (text) {\n    const firstChild = node.firstChild;\n\n    if (\n      firstChild &&\n      firstChild === node.lastChild &&\n      firstChild.nodeType === TEXT_NODE\n    ) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n};\n\nexport default setTextContent;\n"]},"metadata":{},"sourceType":"module"}