{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { SVG_NAMESPACE } from '../shared/DOMNamespaces';\nimport createMicrosoftUnsafeLocalFunction from './createMicrosoftUnsafeLocalFunction';\nimport { enableTrustedTypesIntegration } from 'shared/ReactFeatureFlags'; // SVG temp container for IE lacking innerHTML\n\nlet reusableSVGContainer;\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\n\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  if (node.namespaceURI === SVG_NAMESPACE) {\n    if (__DEV__) {\n      if (enableTrustedTypesIntegration) {\n        // TODO: reconsider the text of this warning and when it should show\n        // before enabling the feature flag.\n        if (typeof trustedTypes !== 'undefined') {\n          console.error(\"Using 'dangerouslySetInnerHTML' in an svg element with \" + 'Trusted Types enabled in an Internet Explorer will cause ' + 'the trusted value to be converted to string. Assigning string ' + \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" + \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" + 'on the enclosing div instead.');\n        }\n      }\n    }\n\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n\n      return;\n    }\n  }\n\n  node.innerHTML = html;\n});\nexport default setInnerHTML;","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-dom/src/client/setInnerHTML.js"],"names":["SVG_NAMESPACE","createMicrosoftUnsafeLocalFunction","enableTrustedTypesIntegration","reusableSVGContainer","setInnerHTML","node","html","namespaceURI","__DEV__","trustedTypes","console","error","document","createElement","innerHTML","valueOf","toString","svgNode","firstChild","removeChild","appendChild"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,yBAA5B;AACA,OAAOC,kCAAP,MAA+C,sCAA/C;AACA,SAAQC,6BAAR,QAA4C,0BAA5C,C,CAEA;;AACA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGH,kCAAkC,CAAC,UACtDI,IADsD,EAEtDC,IAFsD,EAGhD;AACN,MAAID,IAAI,CAACE,YAAL,KAAsBP,aAA1B,EAAyC;AACvC,QAAIQ,OAAJ,EAAa;AACX,UAAIN,6BAAJ,EAAmC;AACjC;AACA;AACA,YAAI,OAAOO,YAAP,KAAwB,WAA5B,EAAyC;AACvCC,UAAAA,OAAO,CAACC,KAAR,CACE,4DACE,2DADF,GAEE,gEAFF,GAGE,oEAHF,GAIE,sFAJF,GAKE,+BANJ;AAQD;AACF;AACF;;AACD,QAAI,EAAE,eAAeN,IAAjB,CAAJ,EAA4B;AAC1B;AACA;AACA;AACAF,MAAAA,oBAAoB,GAClBA,oBAAoB,IAAIS,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAD1B;AAEAV,MAAAA,oBAAoB,CAACW,SAArB,GACE,UAAUR,IAAI,CAACS,OAAL,GAAeC,QAAf,EAAV,GAAsC,QADxC;AAEA,YAAMC,OAAO,GAAGd,oBAAoB,CAACe,UAArC;;AACA,aAAOb,IAAI,CAACa,UAAZ,EAAwB;AACtBb,QAAAA,IAAI,CAACc,WAAL,CAAiBd,IAAI,CAACa,UAAtB;AACD;;AACD,aAAOD,OAAO,CAACC,UAAf,EAA2B;AACzBb,QAAAA,IAAI,CAACe,WAAL,CAAiBH,OAAO,CAACC,UAAzB;AACD;;AACD;AACD;AACF;;AACDb,EAAAA,IAAI,CAACS,SAAL,GAAkBR,IAAlB;AACD,CAxCsD,CAAvD;AA0CA,eAAeF,YAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {SVG_NAMESPACE} from '../shared/DOMNamespaces';\nimport createMicrosoftUnsafeLocalFunction from './createMicrosoftUnsafeLocalFunction';\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\n\n// SVG temp container for IE lacking innerHTML\nlet reusableSVGContainer;\n\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function(\n  node: Element,\n  html: {valueOf(): {toString(): string, ...}, ...},\n): void {\n  if (node.namespaceURI === SVG_NAMESPACE) {\n    if (__DEV__) {\n      if (enableTrustedTypesIntegration) {\n        // TODO: reconsider the text of this warning and when it should show\n        // before enabling the feature flag.\n        if (typeof trustedTypes !== 'undefined') {\n          console.error(\n            \"Using 'dangerouslySetInnerHTML' in an svg element with \" +\n              'Trusted Types enabled in an Internet Explorer will cause ' +\n              'the trusted value to be converted to string. Assigning string ' +\n              \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" +\n              \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" +\n              'on the enclosing div instead.',\n          );\n        }\n      }\n    }\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer =\n        reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML =\n        '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n      return;\n    }\n  }\n  node.innerHTML = (html: any);\n});\n\nexport default setInnerHTML;\n"]},"metadata":{},"sourceType":"module"}