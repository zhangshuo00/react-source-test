{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { enableNewReconciler, enableSchedulingProfiler } from 'shared/ReactFeatureFlags';\nimport ReactVersion from 'shared/ReactVersion';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { SCHEDULING_PROFILER_VERSION } from 'react-devtools-timeline/src/constants';\nimport isArray from 'shared/isArray';\nimport { getLabelForLane as getLabelForLane_old, TotalLanes as TotalLanes_old } from 'react-reconciler/src/ReactFiberLane.old';\nimport { getLabelForLane as getLabelForLane_new, TotalLanes as TotalLanes_new } from 'react-reconciler/src/ReactFiberLane.new';\nconst getLabelForLane = enableNewReconciler ? getLabelForLane_new : getLabelForLane_old;\nconst TotalLanes = enableNewReconciler ? TotalLanes_new : TotalLanes_old;\n/**\n * If performance exists and supports the subset of the User Timing API that we\n * require.\n */\n\nconst supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function';\nlet supportsUserTimingV3 = false;\n\nif (enableSchedulingProfiler) {\n  if (supportsUserTiming) {\n    const CHECK_V3_MARK = '__v3';\n    const markOptions = {}; // $FlowFixMe: Ignore Flow complaining about needing a value\n\n    Object.defineProperty(markOptions, 'startTime', {\n      get: function () {\n        supportsUserTimingV3 = true;\n        return 0;\n      },\n      set: function () {}\n    });\n\n    try {\n      // $FlowFixMe: Flow expects the User Timing level 2 API.\n      performance.mark(CHECK_V3_MARK, markOptions);\n    } catch (error) {// Ignore\n    } finally {\n      performance.clearMarks(CHECK_V3_MARK);\n    }\n  }\n}\n\nconst laneLabels = [];\nexport function getLaneLabels() {\n  if (laneLabels.length === 0) {\n    let lane = 1;\n\n    for (let index = 0; index < TotalLanes; index++) {\n      laneLabels.push(getLabelForLane(lane));\n      lane *= 2;\n    }\n  }\n\n  return laneLabels;\n}\n\nfunction markLaneToLabelMetadata() {\n  getLaneLabels();\n  markAndClear(`--react-lane-labels-${laneLabels.join(',')}`);\n}\n\nfunction markAndClear(name) {\n  performance.mark(name);\n  performance.clearMarks(name);\n}\n\nfunction markVersionMetadata() {\n  markAndClear(`--react-version-${ReactVersion}`);\n  markAndClear(`--profiler-version-${SCHEDULING_PROFILER_VERSION}`);\n}\n\nfunction markInternalModuleRanges() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === 'function') {\n    const ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges(); // This check would not be required,\n    // except that it's possible for things to override __REACT_DEVTOOLS_GLOBAL_HOOK__.\n\n\n    if (isArray(ranges)) {\n      for (let i = 0; i < ranges.length; i++) {\n        const range = ranges[i];\n\n        if (isArray(range) && range.length === 2) {\n          const [startStackFrame, stopStackFrame] = ranges[i];\n          markAndClear(`--react-internal-module-start-${startStackFrame}`);\n          markAndClear(`--react-internal-module-stop-${stopStackFrame}`);\n        }\n      }\n    }\n  }\n}\n\nexport function markCommitStarted(lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--commit-start-${lanes}`); // Certain types of metadata should be logged infrequently.\n      // Normally we would log this during module init,\n      // but there's no guarantee a user is profiling at that time.\n      // Commits happen infrequently (less than renders or state updates)\n      // so we log this extra information along with a commit.\n      // It will likely be logged more than once but that's okay.\n      //\n      // TODO Once DevTools supports starting/stopping the profiler,\n      // we can log this data only once (when started) and remove the per-commit logging.\n\n      markVersionMetadata();\n      markLaneToLabelMetadata();\n      markInternalModuleRanges();\n    }\n  }\n}\nexport function markCommitStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--commit-stop');\n    }\n  }\n}\nexport function markComponentRenderStarted(fiber) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--component-render-start-${componentName}`);\n    }\n  }\n}\nexport function markComponentRenderStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-render-stop');\n    }\n  }\n}\nexport function markComponentPassiveEffectMountStarted(fiber) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--component-passive-effect-mount-start-${componentName}`);\n    }\n  }\n}\nexport function markComponentPassiveEffectMountStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-mount-stop');\n    }\n  }\n}\nexport function markComponentPassiveEffectUnmountStarted(fiber) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--component-passive-effect-unmount-start-${componentName}`);\n    }\n  }\n}\nexport function markComponentPassiveEffectUnmountStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-unmount-stop');\n    }\n  }\n}\nexport function markComponentLayoutEffectMountStarted(fiber) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--component-layout-effect-mount-start-${componentName}`);\n    }\n  }\n}\nexport function markComponentLayoutEffectMountStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-mount-stop');\n    }\n  }\n}\nexport function markComponentLayoutEffectUnmountStarted(fiber) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--component-layout-effect-unmount-start-${componentName}`);\n    }\n  }\n}\nexport function markComponentLayoutEffectUnmountStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-unmount-stop');\n    }\n  }\n}\nexport function markComponentErrored(fiber, thrownValue, lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      const phase = fiber.alternate === null ? 'mount' : 'update';\n      let message = '';\n\n      if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.message === 'string') {\n        message = thrownValue.message;\n      } else if (typeof thrownValue === 'string') {\n        message = thrownValue;\n      } // TODO (timeline) Add component stack id\n\n\n      markAndClear(`--error-${componentName}-${phase}-${message}`);\n    }\n  }\n}\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // $FlowFixMe: Flow cannot handle polymorphic WeakMaps\n\nconst wakeableIDs = new PossiblyWeakMap();\nlet wakeableID = 0;\n\nfunction getWakeableID(wakeable) {\n  if (!wakeableIDs.has(wakeable)) {\n    wakeableIDs.set(wakeable, wakeableID++);\n  }\n\n  return wakeableIDs.get(wakeable);\n}\n\nexport function markComponentSuspended(fiber, wakeable, lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const eventType = wakeableIDs.has(wakeable) ? 'resuspend' : 'suspend';\n      const id = getWakeableID(wakeable);\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      const phase = fiber.alternate === null ? 'mount' : 'update'; // Following the non-standard fn.displayName convention,\n      // frameworks like Relay may also annotate Promises with a displayName,\n      // describing what operation/data the thrown Promise is related to.\n      // When this is available we should pass it along to the Timeline.\n\n      const displayName = wakeable.displayName || ''; // TODO (timeline) Add component stack id\n\n      markAndClear(`--suspense-${eventType}-${id}-${componentName}-${phase}-${lanes}-${displayName}`);\n      wakeable.then(() => markAndClear(`--suspense-resolved-${id}-${componentName}`), () => markAndClear(`--suspense-rejected-${id}-${componentName}`));\n    }\n  }\n}\nexport function markLayoutEffectsStarted(lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--layout-effects-start-${lanes}`);\n    }\n  }\n}\nexport function markLayoutEffectsStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--layout-effects-stop');\n    }\n  }\n}\nexport function markPassiveEffectsStarted(lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--passive-effects-start-${lanes}`);\n    }\n  }\n}\nexport function markPassiveEffectsStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--passive-effects-stop');\n    }\n  }\n}\nexport function markRenderStarted(lanes) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--render-start-${lanes}`);\n    }\n  }\n}\nexport function markRenderYielded() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--render-yield');\n    }\n  }\n}\nexport function markRenderStopped() {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--render-stop');\n    }\n  }\n}\nexport function markRenderScheduled(lane) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--schedule-render-${lane}`);\n    }\n  }\n}\nexport function markForceUpdateScheduled(fiber, lane) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--schedule-forced-update-${lane}-${componentName}`);\n    }\n  }\n}\nexport function markStateUpdateScheduled(fiber, lane) {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown'; // TODO (timeline) Add component stack id\n\n      markAndClear(`--schedule-state-update-${lane}-${componentName}`);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-reconciler/src/SchedulingProfiler.js"],"names":["enableNewReconciler","enableSchedulingProfiler","ReactVersion","getComponentNameFromFiber","SCHEDULING_PROFILER_VERSION","isArray","getLabelForLane","getLabelForLane_old","TotalLanes","TotalLanes_old","getLabelForLane_new","TotalLanes_new","supportsUserTiming","performance","mark","clearMarks","supportsUserTimingV3","CHECK_V3_MARK","markOptions","Object","defineProperty","get","set","error","laneLabels","getLaneLabels","length","lane","index","push","markLaneToLabelMetadata","markAndClear","join","name","markVersionMetadata","markInternalModuleRanges","__REACT_DEVTOOLS_GLOBAL_HOOK__","getInternalModuleRanges","ranges","i","range","startStackFrame","stopStackFrame","markCommitStarted","lanes","markCommitStopped","markComponentRenderStarted","fiber","componentName","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","phase","alternate","message","PossiblyWeakMap","WeakMap","Map","wakeableIDs","wakeableID","getWakeableID","wakeable","has","markComponentSuspended","eventType","id","displayName","then","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Wakeable} from 'shared/ReactTypes';\n\nimport {\n  enableNewReconciler,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport ReactVersion from 'shared/ReactVersion';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {SCHEDULING_PROFILER_VERSION} from 'react-devtools-timeline/src/constants';\nimport isArray from 'shared/isArray';\n\nimport {\n  getLabelForLane as getLabelForLane_old,\n  TotalLanes as TotalLanes_old,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {\n  getLabelForLane as getLabelForLane_new,\n  TotalLanes as TotalLanes_new,\n} from 'react-reconciler/src/ReactFiberLane.new';\n\nconst getLabelForLane = enableNewReconciler\n  ? getLabelForLane_new\n  : getLabelForLane_old;\n\nconst TotalLanes = enableNewReconciler ? TotalLanes_new : TotalLanes_old;\n\n/**\n * If performance exists and supports the subset of the User Timing API that we\n * require.\n */\nconst supportsUserTiming =\n  typeof performance !== 'undefined' &&\n  typeof performance.mark === 'function' &&\n  typeof performance.clearMarks === 'function';\n\nlet supportsUserTimingV3 = false;\nif (enableSchedulingProfiler) {\n  if (supportsUserTiming) {\n    const CHECK_V3_MARK = '__v3';\n    const markOptions = {};\n    // $FlowFixMe: Ignore Flow complaining about needing a value\n    Object.defineProperty(markOptions, 'startTime', {\n      get: function() {\n        supportsUserTimingV3 = true;\n        return 0;\n      },\n      set: function() {},\n    });\n\n    try {\n      // $FlowFixMe: Flow expects the User Timing level 2 API.\n      performance.mark(CHECK_V3_MARK, markOptions);\n    } catch (error) {\n      // Ignore\n    } finally {\n      performance.clearMarks(CHECK_V3_MARK);\n    }\n  }\n}\n\nconst laneLabels: Array<string> = [];\n\nexport function getLaneLabels(): Array<string> {\n  if (laneLabels.length === 0) {\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      laneLabels.push(((getLabelForLane(lane): any): string));\n\n      lane *= 2;\n    }\n  }\n  return laneLabels;\n}\n\nfunction markLaneToLabelMetadata() {\n  getLaneLabels();\n\n  markAndClear(`--react-lane-labels-${laneLabels.join(',')}`);\n}\n\nfunction markAndClear(name) {\n  performance.mark(name);\n  performance.clearMarks(name);\n}\n\nfunction markVersionMetadata() {\n  markAndClear(`--react-version-${ReactVersion}`);\n  markAndClear(`--profiler-version-${SCHEDULING_PROFILER_VERSION}`);\n}\n\nfunction markInternalModuleRanges() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges === 'function'\n  ) {\n    const ranges = __REACT_DEVTOOLS_GLOBAL_HOOK__.getInternalModuleRanges();\n    // This check would not be required,\n    // except that it's possible for things to override __REACT_DEVTOOLS_GLOBAL_HOOK__.\n    if (isArray(ranges)) {\n      for (let i = 0; i < ranges.length; i++) {\n        const range = ranges[i];\n        if (isArray(range) && range.length === 2) {\n          const [startStackFrame, stopStackFrame] = ranges[i];\n\n          markAndClear(`--react-internal-module-start-${startStackFrame}`);\n          markAndClear(`--react-internal-module-stop-${stopStackFrame}`);\n        }\n      }\n    }\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--commit-start-${lanes}`);\n\n      // Certain types of metadata should be logged infrequently.\n      // Normally we would log this during module init,\n      // but there's no guarantee a user is profiling at that time.\n      // Commits happen infrequently (less than renders or state updates)\n      // so we log this extra information along with a commit.\n      // It will likely be logged more than once but that's okay.\n      //\n      // TODO Once DevTools supports starting/stopping the profiler,\n      // we can log this data only once (when started) and remove the per-commit logging.\n      markVersionMetadata();\n      markLaneToLabelMetadata();\n      markInternalModuleRanges();\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--commit-stop');\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--component-render-start-${componentName}`);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-render-stop');\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--component-passive-effect-mount-start-${componentName}`);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-mount-stop');\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--component-passive-effect-unmount-start-${componentName}`);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-passive-effect-unmount-stop');\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--component-layout-effect-mount-start-${componentName}`);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-mount-stop');\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--component-layout-effect-unmount-start-${componentName}`);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--component-layout-effect-unmount-stop');\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      const phase = fiber.alternate === null ? 'mount' : 'update';\n\n      let message = '';\n      if (\n        thrownValue !== null &&\n        typeof thrownValue === 'object' &&\n        typeof thrownValue.message === 'string'\n      ) {\n        message = thrownValue.message;\n      } else if (typeof thrownValue === 'string') {\n        message = thrownValue;\n      }\n\n      // TODO (timeline) Add component stack id\n      markAndClear(`--error-${componentName}-${phase}-${message}`);\n    }\n  }\n}\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\n// $FlowFixMe: Flow cannot handle polymorphic WeakMaps\nconst wakeableIDs: WeakMap<Wakeable, number> = new PossiblyWeakMap();\nlet wakeableID: number = 0;\nfunction getWakeableID(wakeable: Wakeable): number {\n  if (!wakeableIDs.has(wakeable)) {\n    wakeableIDs.set(wakeable, wakeableID++);\n  }\n  return ((wakeableIDs.get(wakeable): any): number);\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const eventType = wakeableIDs.has(wakeable) ? 'resuspend' : 'suspend';\n      const id = getWakeableID(wakeable);\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      const phase = fiber.alternate === null ? 'mount' : 'update';\n\n      // Following the non-standard fn.displayName convention,\n      // frameworks like Relay may also annotate Promises with a displayName,\n      // describing what operation/data the thrown Promise is related to.\n      // When this is available we should pass it along to the Timeline.\n      const displayName = (wakeable: any).displayName || '';\n\n      // TODO (timeline) Add component stack id\n      markAndClear(\n        `--suspense-${eventType}-${id}-${componentName}-${phase}-${lanes}-${displayName}`,\n      );\n      wakeable.then(\n        () => markAndClear(`--suspense-resolved-${id}-${componentName}`),\n        () => markAndClear(`--suspense-rejected-${id}-${componentName}`),\n      );\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--layout-effects-start-${lanes}`);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--layout-effects-stop');\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--passive-effects-start-${lanes}`);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--passive-effects-stop');\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--render-start-${lanes}`);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--render-yield');\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear('--render-stop');\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      markAndClear(`--schedule-render-${lane}`);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--schedule-forced-update-${lane}-${componentName}`);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (supportsUserTimingV3) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n      // TODO (timeline) Add component stack id\n      markAndClear(`--schedule-state-update-${lane}-${componentName}`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}