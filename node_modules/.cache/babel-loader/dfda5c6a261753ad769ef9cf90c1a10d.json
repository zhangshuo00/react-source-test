{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { noTimeout, supportsHydration } from './ReactFiberHostConfig';\nimport { createHostRootFiber } from './ReactFiber.new';\nimport { NoLane, NoLanes, NoTimestamp, TotalLanes, createLaneMap } from './ReactFiberLane.new';\nimport { enableSuspenseCallback, enableCache, enableProfilerCommitHooks, enableProfilerTimer, enableUpdaterTracking } from 'shared/ReactFeatureFlags';\nimport { initializeUpdateQueue } from './ReactUpdateQueue.new';\nimport { LegacyRoot, ConcurrentRoot } from './ReactRootTags';\nimport { createCache, retainCache } from './ReactFiberCacheComponent.new';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.isDehydrated = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\n_c = FiberRootNode;\nexport function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  const root = new FiberRootNode(containerInfo, tag, hydrate);\n\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  } // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n\n\n  const uninitializedFiber = createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache); // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState = {\n      element: null,\n      cache: initialCache\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState = {\n      element: null\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FiberRootNode\");","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-reconciler/src/ReactFiberRoot.new.js"],"names":["noTimeout","supportsHydration","createHostRootFiber","NoLane","NoLanes","NoTimestamp","TotalLanes","createLaneMap","enableSuspenseCallback","enableCache","enableProfilerCommitHooks","enableProfilerTimer","enableUpdaterTracking","initializeUpdateQueue","LegacyRoot","ConcurrentRoot","createCache","retainCache","FiberRootNode","containerInfo","tag","hydrate","pendingChildren","current","pingCache","finishedWork","timeoutHandle","context","pendingContext","isDehydrated","callbackNode","callbackPriority","eventTimes","expirationTimes","pendingLanes","suspendedLanes","pingedLanes","expiredLanes","mutableReadLanes","finishedLanes","entangledLanes","entanglements","pooledCache","pooledCacheLanes","mutableSourceEagerHydrationData","hydrationCallbacks","effectDuration","passiveEffectDuration","memoizedUpdaters","Set","pendingUpdatersLaneMap","i","push","__DEV__","_debugRootType","createFiberRoot","isStrictMode","concurrentUpdatesByDefaultOverride","root","uninitializedFiber","stateNode","initialCache","initialState","element","cache","memoizedState"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.new';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.new';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.new';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.new';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.isDehydrated = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState = {\n      element: null,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState = {\n      element: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n"]},"metadata":{},"sourceType":"module"}