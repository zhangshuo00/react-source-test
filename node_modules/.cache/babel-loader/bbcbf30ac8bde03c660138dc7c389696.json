{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { createRootStrictEffectsByDefault, enableCache, enableStrictEffects, enableProfilerTimer, enableScopeAPI, enableSyncDefaultUpdates, allowConcurrentByDefault } from 'shared/ReactFeatureFlags';\nimport { supportsPersistence, getOffscreenContainerType } from './ReactFiberHostConfig';\nimport { NoFlags, Placement, StaticMask } from './ReactFiberFlags';\nimport { ConcurrentRoot } from './ReactRootTags';\nimport { IndeterminateComponent, ClassComponent, HostRoot, HostComponent, HostText, HostPortal, ForwardRef, Fragment, Mode, ContextProvider, ContextConsumer, Profiler, SuspenseComponent, SuspenseListComponent, DehydratedFragment, FunctionComponent, MemoComponent, SimpleMemoComponent, LazyComponent, ScopeComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent } from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { isDevToolsPresent } from './ReactFiberDevToolsHook.old';\nimport { resolveClassForHotReloading, resolveFunctionForHotReloading, resolveForwardRefForHotReloading } from './ReactFiberHotReloading.old';\nimport { NoLanes } from './ReactFiberLane.old';\nimport { NoMode, ConcurrentMode, DebugTracingMode, ProfileMode, StrictLegacyMode, StrictEffectsMode, ConcurrentUpdatesByDefaultMode } from './ReactTypeOfMode';\nimport { REACT_FORWARD_REF_TYPE, REACT_FRAGMENT_TYPE, REACT_DEBUG_TRACING_MODE_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, REACT_SCOPE_TYPE, REACT_OFFSCREEN_TYPE, REACT_LEGACY_HIDDEN_TYPE, REACT_CACHE_TYPE } from 'shared/ReactSymbols';\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\n_c = FiberNode;\n\nconst createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n}\nexport function resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nexport function createWorkInProgress(current, pendingProps) {\n  let workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nexport function resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nexport function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  let mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n\n    if ( // We only use this flag for our repo tests to check both behaviors.\n    // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n    !enableSyncDefaultUpdates || // Only for internal experiments.\n    allowConcurrentByDefault && concurrentUpdatesByDefaultOverride) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nexport function createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  let resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                if (__DEV__) {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          let info = '';\n\n          if (__DEV__) {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + `but got: ${type == null ? type : typeof type}.${info}`);\n        }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nexport function createOffscreenHostContainerFiber(props, fiberMode, lanes, key) {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    throw new Error('Not implemented.');\n  }\n}\nexport function createFiberFromElement(element, mode, lanes) {\n  let owner = null;\n\n  if (__DEV__) {\n    owner = element._owner;\n  }\n\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nexport function createFiberFromFragment(elements, mode, lanes, key) {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(scope, pendingProps, mode, lanes, key) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromCache(pendingProps, mode, lanes, key) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromText(content, mode, lanes) {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nexport function createFiberFromHostInstanceForDeletion() {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nexport function createFiberFromDehydratedFragment(dehydratedNode) {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nexport function createFiberFromPortal(portal, mode, lanes) {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nexport function assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FiberNode\");","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/ReactFiber.old.js"],"names":["createRootStrictEffectsByDefault","enableCache","enableStrictEffects","enableProfilerTimer","enableScopeAPI","enableSyncDefaultUpdates","allowConcurrentByDefault","supportsPersistence","getOffscreenContainerType","NoFlags","Placement","StaticMask","ConcurrentRoot","IndeterminateComponent","ClassComponent","HostRoot","HostComponent","HostText","HostPortal","ForwardRef","Fragment","Mode","ContextProvider","ContextConsumer","Profiler","SuspenseComponent","SuspenseListComponent","DehydratedFragment","FunctionComponent","MemoComponent","SimpleMemoComponent","LazyComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","getComponentNameFromFiber","isDevToolsPresent","resolveClassForHotReloading","resolveFunctionForHotReloading","resolveForwardRefForHotReloading","NoLanes","NoMode","ConcurrentMode","DebugTracingMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","ConcurrentUpdatesByDefaultMode","REACT_FORWARD_REF_TYPE","REACT_FRAGMENT_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","hasBadMapPolyfill","__DEV__","nonExtensibleObject","Object","preventExtensions","Map","Set","e","FiberNode","tag","pendingProps","key","mode","elementType","type","stateNode","return","child","sibling","index","ref","memoizedProps","updateQueue","memoizedState","dependencies","flags","subtreeFlags","deletions","lanes","childLanes","alternate","actualDuration","Number","NaN","actualStartTime","selfBaseDuration","treeBaseDuration","_debugSource","_debugOwner","_debugNeedsRemount","_debugHookTypes","createFiber","shouldConstruct","Component","prototype","isReactComponent","isSimpleFunctionComponent","defaultProps","undefined","resolveLazyComponentTag","$$typeof","createWorkInProgress","current","workInProgress","currentDependencies","firstContext","resetWorkInProgress","renderLanes","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","createFiberFromTypeAndProps","owner","fiberTag","resolvedType","getTag","createFiberFromFragment","children","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromOffscreen","createFiberFromLegacyHidden","createFiberFromScope","createFiberFromCache","info","keys","length","ownerName","Error","fiber","createOffscreenHostContainerFiber","props","fiberMode","createFiberFromElement","element","_owner","_source","elements","scope","id","console","error","effectDuration","passiveEffectDuration","createFiberFromText","content","createFiberFromHostInstanceForDeletion","createFiberFromDehydratedFragment","dehydratedNode","createFiberFromPortal","portal","containerInfo","pendingChildren","implementation","assignFiberPropertiesInDEV","target","source"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance, Props} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n} from 'shared/ReactFeatureFlags';\nimport {\n  supportsPersistence,\n  getOffscreenContainerType,\n} from './ReactFiberHostConfig';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createOffscreenHostContainerFiber(\n  props: Props,\n  fiberMode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (supportsPersistence) {\n    const type = getOffscreenContainerType();\n    const fiber = createFiber(HostComponent, props, key, fiberMode);\n    fiber.elementType = type;\n    fiber.type = type;\n    fiber.lanes = lanes;\n    return fiber;\n  } else {\n    // Only implemented in persistent mode\n    throw new Error('Not implemented.');\n  }\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n"]},"metadata":{},"sourceType":"module"}