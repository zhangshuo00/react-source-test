{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { disableJavaScriptURLs } from 'shared/ReactFeatureFlags'; // A javascript: URL can contain leading C0 control or \\u0020 SPACE,\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\n\nconst isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\nlet didWarn = false;\n\nfunction sanitizeURL(url) {\n  if (disableJavaScriptURLs) {\n    if (isJavaScriptProtocol.test(url)) {\n      throw new Error('React has blocked a javascript: URL as a security precaution.');\n    }\n  } else if (__DEV__) {\n    if (!didWarn && isJavaScriptProtocol.test(url)) {\n      didWarn = true;\n      console.error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));\n    }\n  }\n}\n\nexport default sanitizeURL;","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-dom/src/shared/sanitizeURL.js"],"names":["disableJavaScriptURLs","isJavaScriptProtocol","didWarn","sanitizeURL","url","test","Error","__DEV__","console","error","JSON","stringify"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,qBAAR,QAAoC,0BAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,MAAMC,oBAAoB,GAAG,2HAA7B;AAEA,IAAIC,OAAO,GAAG,KAAd;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAAkC;AAChC,MAAIJ,qBAAJ,EAA2B;AACzB,QAAIC,oBAAoB,CAACI,IAArB,CAA0BD,GAA1B,CAAJ,EAAoC;AAClC,YAAM,IAAIE,KAAJ,CACJ,+DADI,CAAN;AAGD;AACF,GAND,MAMO,IAAIC,OAAJ,EAAa;AAClB,QAAI,CAACL,OAAD,IAAYD,oBAAoB,CAACI,IAArB,CAA0BD,GAA1B,CAAhB,EAAgD;AAC9CF,MAAAA,OAAO,GAAG,IAAV;AACAM,MAAAA,OAAO,CAACC,KAAR,CACE,qFACE,iFADF,GAEE,6DAHJ,EAIEC,IAAI,CAACC,SAAL,CAAeP,GAAf,CAJF;AAMD;AACF;AACF;;AAED,eAAeD,WAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {disableJavaScriptURLs} from 'shared/ReactFeatureFlags';\n\n// A javascript: URL can contain leading C0 control or \\u0020 SPACE,\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\nconst isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n\nlet didWarn = false;\n\nfunction sanitizeURL(url: string) {\n  if (disableJavaScriptURLs) {\n    if (isJavaScriptProtocol.test(url)) {\n      throw new Error(\n        'React has blocked a javascript: URL as a security precaution.',\n      );\n    }\n  } else if (__DEV__) {\n    if (!didWarn && isJavaScriptProtocol.test(url)) {\n      didWarn = true;\n      console.error(\n        'A future version of React will block javascript: URLs as a security precaution. ' +\n          'Use event handlers instead if you can. If you need to generate unsafe HTML try ' +\n          'using dangerouslySetInnerHTML instead. React was passed %s.',\n        JSON.stringify(url),\n      );\n    }\n  }\n}\n\nexport default sanitizeURL;\n"]},"metadata":{},"sourceType":"module"}