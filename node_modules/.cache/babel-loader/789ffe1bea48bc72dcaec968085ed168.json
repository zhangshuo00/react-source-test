{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { REACT_MEMO_TYPE } from 'shared/ReactSymbols';\nimport isValidElementType from 'shared/isValidElementType';\nexport function memo(type, compare) {\n  if (__DEV__) {\n    if (!isValidElementType(type)) {\n      console.error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  const elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare\n  };\n\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react/src/ReactMemo.js"],"names":["REACT_MEMO_TYPE","isValidElementType","memo","type","compare","__DEV__","console","error","elementType","$$typeof","undefined","ownName","Object","defineProperty","enumerable","configurable","get","set","name","displayName"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,eAAR,QAA8B,qBAA9B;AAEA,OAAOC,kBAAP,MAA+B,2BAA/B;AAEA,OAAO,SAASC,IAAT,CACLC,IADK,EAELC,OAFK,EAGL;AACA,MAAIC,OAAJ,EAAa;AACX,QAAI,CAACJ,kBAAkB,CAACE,IAAD,CAAvB,EAA+B;AAC7BG,MAAAA,OAAO,CAACC,KAAR,CACE,2DACE,cAFJ,EAGEJ,IAAI,KAAK,IAAT,GAAgB,MAAhB,GAAyB,OAAOA,IAHlC;AAKD;AACF;;AACD,QAAMK,WAAW,GAAG;AAClBC,IAAAA,QAAQ,EAAET,eADQ;AAElBG,IAAAA,IAFkB;AAGlBC,IAAAA,OAAO,EAAEA,OAAO,KAAKM,SAAZ,GAAwB,IAAxB,GAA+BN;AAHtB,GAApB;;AAKA,MAAIC,OAAJ,EAAa;AACX,QAAIM,OAAJ;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAsBL,WAAtB,EAAmC,aAAnC,EAAkD;AAChDM,MAAAA,UAAU,EAAE,KADoC;AAEhDC,MAAAA,YAAY,EAAE,IAFkC;AAGhDC,MAAAA,GAAG,EAAE,YAAW;AACd,eAAOL,OAAP;AACD,OAL+C;AAMhDM,MAAAA,GAAG,EAAE,UAASC,IAAT,EAAe;AAClBP,QAAAA,OAAO,GAAGO,IAAV,CADkB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAI,CAACf,IAAI,CAACe,IAAN,IAAc,CAACf,IAAI,CAACgB,WAAxB,EAAqC;AACnChB,UAAAA,IAAI,CAACgB,WAAL,GAAmBD,IAAnB;AACD;AACF;AAnB+C,KAAlD;AAqBD;;AACD,SAAOV,WAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {REACT_MEMO_TYPE} from 'shared/ReactSymbols';\n\nimport isValidElementType from 'shared/isValidElementType';\n\nexport function memo<Props>(\n  type: React$ElementType,\n  compare?: (oldProps: Props, newProps: Props) => boolean,\n) {\n  if (__DEV__) {\n    if (!isValidElementType(type)) {\n      console.error(\n        'memo: The first argument must be a component. Instead ' +\n          'received: %s',\n        type === null ? 'null' : typeof type,\n      );\n    }\n  }\n  const elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare,\n  };\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function() {\n        return ownName;\n      },\n      set: function(name) {\n        ownName = name;\n\n        // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      },\n    });\n  }\n  return elementType;\n}\n"]},"metadata":{},"sourceType":"module"}