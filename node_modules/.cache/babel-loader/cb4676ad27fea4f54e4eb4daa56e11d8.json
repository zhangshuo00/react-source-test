{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/* eslint valid-typeof: 0 */\nimport getEventCharCode from './getEventCharCode';\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n} // This is intentionally a factory so that we have different returned constructors.\n// If we had a single constructor, it would be megamorphic and engines would deopt.\n\n\nfunction createSyntheticEvent(Interface) {\n  /**\n   * Synthetic events are dispatched by event plugins, typically in response to a\n   * top-level event delegation handler.\n   *\n   * These systems should generally use pooling to reduce the frequency of garbage\n   * collection. The system should check `isPersistent` to determine whether the\n   * event should be released into the pool after being dispatched. Users that\n   * need a persisted event should invoke `persist`.\n   *\n   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n   * normalizing browser quirks. Subclasses do not necessarily have to implement a\n   * DOM interface; custom application-specific events can also subclass this.\n   */\n  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n\n    for (const propName in Interface) {\n      if (!Interface.hasOwnProperty(propName)) {\n        continue;\n      }\n\n      const normalize = Interface[propName];\n\n      if (normalize) {\n        this[propName] = normalize(nativeEvent);\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n\n    const defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n\n    if (defaultPrevented) {\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    } else {\n      this.isDefaultPrevented = functionThatReturnsFalse;\n    }\n\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  }\n\n  Object.assign(SyntheticBaseEvent.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = true;\n      const event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.preventDefault) {\n        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.returnValue !== 'unknown') {\n        event.returnValue = false;\n      }\n\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    },\n    stopPropagation: function () {\n      const event = this.nativeEvent;\n\n      if (!event) {\n        return;\n      }\n\n      if (event.stopPropagation) {\n        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.cancelBubble !== 'unknown') {\n        // The ChangeEventPlugin registers a \"propertychange\" event for\n        // IE. This event does not support bubbling or cancelling, and\n        // any references to cancelBubble throw \"Member not found\".  A\n        // typeof check of \"unknown\" circumvents this issue (and is also\n        // IE specific).\n        event.cancelBubble = true;\n      }\n\n      this.isPropagationStopped = functionThatReturnsTrue;\n    },\n\n    /**\n     * We release all dispatched `SyntheticEvent`s after each event loop, adding\n     * them back into the pool. This allows a way to hold onto a reference that\n     * won't be added back into the pool.\n     */\n    persist: function () {// Modern event system doesn't use pooling.\n    },\n\n    /**\n     * Checks if this event should be released back into the pool.\n     *\n     * @return {boolean} True if this should not be released, false otherwise.\n     */\n    isPersistent: functionThatReturnsTrue\n  });\n  return SyntheticBaseEvent;\n}\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst EventInterface = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n};\nexport const SyntheticEvent = createSyntheticEvent(EventInterface);\n_c = SyntheticEvent;\nconst UIEventInterface = { ...EventInterface,\n  view: 0,\n  detail: 0\n};\nexport const SyntheticUIEvent = createSyntheticEvent(UIEventInterface);\n_c2 = SyntheticUIEvent;\nlet lastMovementX;\nlet lastMovementY;\nlet lastMouseEvent;\n\nfunction updateMouseMovementPolyfillState(event) {\n  if (event !== lastMouseEvent) {\n    if (lastMouseEvent && event.type === 'mousemove') {\n      lastMovementX = event.screenX - lastMouseEvent.screenX;\n      lastMovementY = event.screenY - lastMouseEvent.screenY;\n    } else {\n      lastMovementX = 0;\n      lastMovementY = 0;\n    }\n\n    lastMouseEvent = event;\n  }\n}\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst MouseEventInterface = { ...UIEventInterface,\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: getEventModifierState,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function (event) {\n    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;\n    return event.relatedTarget;\n  },\n  movementX: function (event) {\n    if ('movementX' in event) {\n      return event.movementX;\n    }\n\n    updateMouseMovementPolyfillState(event);\n    return lastMovementX;\n  },\n  movementY: function (event) {\n    if ('movementY' in event) {\n      return event.movementY;\n    } // Don't need to call updateMouseMovementPolyfillState() here\n    // because it's guaranteed to have already run when movementX\n    // was copied.\n\n\n    return lastMovementY;\n  }\n};\nexport const SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n_c3 = SyntheticMouseEvent;\nconst DragEventInterface = { ...MouseEventInterface,\n  dataTransfer: 0\n};\nexport const SyntheticDragEvent = createSyntheticEvent(DragEventInterface);\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n_c4 = SyntheticDragEvent;\nconst FocusEventInterface = { ...UIEventInterface,\n  relatedTarget: 0\n};\nexport const SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\n\n_c5 = SyntheticFocusEvent;\nconst AnimationEventInterface = { ...EventInterface,\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n};\nexport const SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\n\n_c6 = SyntheticAnimationEvent;\nconst ClipboardEventInterface = { ...EventInterface,\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\nexport const SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\n\n_c7 = SyntheticClipboardEvent;\nconst CompositionEventInterface = { ...EventInterface,\n  data: 0\n};\nexport const SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\n// Happens to share the same list for now.\n\n_c8 = SyntheticCompositionEvent;\nexport const SyntheticInputEvent = SyntheticCompositionEvent;\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nconst normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nconst translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\n\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    const key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    const charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\n\nconst modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey'\n}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\n// getModifierState. If getModifierState is not supported, we map it to a set of\n// modifier keys exposed by the event. In this case, Lock-keys are not supported.\n\nfunction modifierStateGetter(keyArg) {\n  const syntheticEvent = this;\n  const nativeEvent = syntheticEvent.nativeEvent;\n\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n\n  const keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n\nconst KeyboardEventInterface = { ...UIEventInterface,\n  key: getEventKey,\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n\n    return 0;\n  }\n};\nexport const SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);\n/**\n * @interface PointerEvent\n * @see http://www.w3.org/TR/pointerevents/\n */\n\n_c9 = SyntheticKeyboardEvent;\nconst PointerEventInterface = { ...MouseEventInterface,\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n};\nexport const SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\n\n_c10 = SyntheticPointerEvent;\nconst TouchEventInterface = { ...UIEventInterface,\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: getEventModifierState\n};\nexport const SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\n\n_c11 = SyntheticTouchEvent;\nconst TransitionEventInterface = { ...EventInterface,\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n};\nexport const SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n\n_c12 = SyntheticTransitionEvent;\nconst WheelEventInterface = { ...MouseEventInterface,\n\n  deltaX(event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n\n  deltaY(event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n\n  deltaZ: 0,\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: 0\n};\nexport const SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);\n_c13 = SyntheticWheelEvent;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"SyntheticEvent\");\n$RefreshReg$(_c2, \"SyntheticUIEvent\");\n$RefreshReg$(_c3, \"SyntheticMouseEvent\");\n$RefreshReg$(_c4, \"SyntheticDragEvent\");\n$RefreshReg$(_c5, \"SyntheticFocusEvent\");\n$RefreshReg$(_c6, \"SyntheticAnimationEvent\");\n$RefreshReg$(_c7, \"SyntheticClipboardEvent\");\n$RefreshReg$(_c8, \"SyntheticCompositionEvent\");\n$RefreshReg$(_c9, \"SyntheticKeyboardEvent\");\n$RefreshReg$(_c10, \"SyntheticPointerEvent\");\n$RefreshReg$(_c11, \"SyntheticTouchEvent\");\n$RefreshReg$(_c12, \"SyntheticTransitionEvent\");\n$RefreshReg$(_c13, \"SyntheticWheelEvent\");","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-dom/src/events/SyntheticEvent.js"],"names":["getEventCharCode","functionThatReturnsTrue","functionThatReturnsFalse","createSyntheticEvent","Interface","SyntheticBaseEvent","reactName","reactEventType","targetInst","nativeEvent","nativeEventTarget","_reactName","_targetInst","type","target","currentTarget","propName","hasOwnProperty","normalize","defaultPrevented","returnValue","isDefaultPrevented","isPropagationStopped","Object","assign","prototype","preventDefault","event","stopPropagation","cancelBubble","persist","isPersistent","EventInterface","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","SyntheticEvent","UIEventInterface","view","detail","SyntheticUIEvent","lastMovementX","lastMovementY","lastMouseEvent","updateMouseMovementPolyfillState","screenX","screenY","MouseEventInterface","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","getEventModifierState","button","buttons","relatedTarget","undefined","fromElement","srcElement","toElement","movementX","movementY","SyntheticMouseEvent","DragEventInterface","dataTransfer","SyntheticDragEvent","FocusEventInterface","SyntheticFocusEvent","AnimationEventInterface","animationName","elapsedTime","pseudoElement","SyntheticAnimationEvent","ClipboardEventInterface","clipboardData","window","SyntheticClipboardEvent","CompositionEventInterface","data","SyntheticCompositionEvent","SyntheticInputEvent","normalizeKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","translateToKey","getEventKey","key","charCode","String","fromCharCode","keyCode","modifierKeyToProp","Alt","Control","Meta","Shift","modifierStateGetter","keyArg","syntheticEvent","keyProp","KeyboardEventInterface","code","location","repeat","locale","which","SyntheticKeyboardEvent","PointerEventInterface","pointerId","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","SyntheticPointerEvent","TouchEventInterface","touches","targetTouches","changedTouches","SyntheticTouchEvent","TransitionEventInterface","propertyName","SyntheticTransitionEvent","WheelEventInterface","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","SyntheticWheelEvent"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint valid-typeof: 0 */\n\nimport getEventCharCode from './getEventCharCode';\n\ntype EventInterfaceType = {\n  [propName: string]: 0 | ((event: {[propName: string]: mixed}) => mixed),\n};\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n}\n\n// This is intentionally a factory so that we have different returned constructors.\n// If we had a single constructor, it would be megamorphic and engines would deopt.\nfunction createSyntheticEvent(Interface: EventInterfaceType) {\n  /**\n   * Synthetic events are dispatched by event plugins, typically in response to a\n   * top-level event delegation handler.\n   *\n   * These systems should generally use pooling to reduce the frequency of garbage\n   * collection. The system should check `isPersistent` to determine whether the\n   * event should be released into the pool after being dispatched. Users that\n   * need a persisted event should invoke `persist`.\n   *\n   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n   * normalizing browser quirks. Subclasses do not necessarily have to implement a\n   * DOM interface; custom application-specific events can also subclass this.\n   */\n  function SyntheticBaseEvent(\n    reactName: string | null,\n    reactEventType: string,\n    targetInst: Fiber,\n    nativeEvent: {[propName: string]: mixed},\n    nativeEventTarget: null | EventTarget,\n  ) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n\n    for (const propName in Interface) {\n      if (!Interface.hasOwnProperty(propName)) {\n        continue;\n      }\n      const normalize = Interface[propName];\n      if (normalize) {\n        this[propName] = normalize(nativeEvent);\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n\n    const defaultPrevented =\n      nativeEvent.defaultPrevented != null\n        ? nativeEvent.defaultPrevented\n        : nativeEvent.returnValue === false;\n    if (defaultPrevented) {\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    } else {\n      this.isDefaultPrevented = functionThatReturnsFalse;\n    }\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  }\n\n  Object.assign(SyntheticBaseEvent.prototype, {\n    preventDefault: function() {\n      this.defaultPrevented = true;\n      const event = this.nativeEvent;\n      if (!event) {\n        return;\n      }\n\n      if (event.preventDefault) {\n        event.preventDefault();\n        // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.returnValue !== 'unknown') {\n        event.returnValue = false;\n      }\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    },\n\n    stopPropagation: function() {\n      const event = this.nativeEvent;\n      if (!event) {\n        return;\n      }\n\n      if (event.stopPropagation) {\n        event.stopPropagation();\n        // $FlowFixMe - flow is not aware of `unknown` in IE\n      } else if (typeof event.cancelBubble !== 'unknown') {\n        // The ChangeEventPlugin registers a \"propertychange\" event for\n        // IE. This event does not support bubbling or cancelling, and\n        // any references to cancelBubble throw \"Member not found\".  A\n        // typeof check of \"unknown\" circumvents this issue (and is also\n        // IE specific).\n        event.cancelBubble = true;\n      }\n\n      this.isPropagationStopped = functionThatReturnsTrue;\n    },\n\n    /**\n     * We release all dispatched `SyntheticEvent`s after each event loop, adding\n     * them back into the pool. This allows a way to hold onto a reference that\n     * won't be added back into the pool.\n     */\n    persist: function() {\n      // Modern event system doesn't use pooling.\n    },\n\n    /**\n     * Checks if this event should be released back into the pool.\n     *\n     * @return {boolean} True if this should not be released, false otherwise.\n     */\n    isPersistent: functionThatReturnsTrue,\n  });\n  return SyntheticBaseEvent;\n}\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst EventInterface = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0,\n};\nexport const SyntheticEvent = createSyntheticEvent(EventInterface);\n\nconst UIEventInterface: EventInterfaceType = {\n  ...EventInterface,\n  view: 0,\n  detail: 0,\n};\nexport const SyntheticUIEvent = createSyntheticEvent(UIEventInterface);\n\nlet lastMovementX;\nlet lastMovementY;\nlet lastMouseEvent;\n\nfunction updateMouseMovementPolyfillState(event) {\n  if (event !== lastMouseEvent) {\n    if (lastMouseEvent && event.type === 'mousemove') {\n      lastMovementX = event.screenX - lastMouseEvent.screenX;\n      lastMovementY = event.screenY - lastMouseEvent.screenY;\n    } else {\n      lastMovementX = 0;\n      lastMovementY = 0;\n    }\n    lastMouseEvent = event;\n  }\n}\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst MouseEventInterface: EventInterfaceType = {\n  ...UIEventInterface,\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: getEventModifierState,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function(event) {\n    if (event.relatedTarget === undefined)\n      return event.fromElement === event.srcElement\n        ? event.toElement\n        : event.fromElement;\n\n    return event.relatedTarget;\n  },\n  movementX: function(event) {\n    if ('movementX' in event) {\n      return event.movementX;\n    }\n    updateMouseMovementPolyfillState(event);\n    return lastMovementX;\n  },\n  movementY: function(event) {\n    if ('movementY' in event) {\n      return event.movementY;\n    }\n    // Don't need to call updateMouseMovementPolyfillState() here\n    // because it's guaranteed to have already run when movementX\n    // was copied.\n    return lastMovementY;\n  },\n};\nexport const SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst DragEventInterface: EventInterfaceType = {\n  ...MouseEventInterface,\n  dataTransfer: 0,\n};\nexport const SyntheticDragEvent = createSyntheticEvent(DragEventInterface);\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst FocusEventInterface: EventInterfaceType = {\n  ...UIEventInterface,\n  relatedTarget: 0,\n};\nexport const SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\nconst AnimationEventInterface: EventInterfaceType = {\n  ...EventInterface,\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0,\n};\nexport const SyntheticAnimationEvent = createSyntheticEvent(\n  AnimationEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nconst ClipboardEventInterface: EventInterfaceType = {\n  ...EventInterface,\n  clipboardData: function(event) {\n    return 'clipboardData' in event\n      ? event.clipboardData\n      : window.clipboardData;\n  },\n};\nexport const SyntheticClipboardEvent = createSyntheticEvent(\n  ClipboardEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nconst CompositionEventInterface: EventInterfaceType = {\n  ...EventInterface,\n  data: 0,\n};\nexport const SyntheticCompositionEvent = createSyntheticEvent(\n  CompositionEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\n// Happens to share the same list for now.\nexport const SyntheticInputEvent = SyntheticCompositionEvent;\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nconst normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified',\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nconst translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta',\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    const key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    const charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\nconst modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey',\n};\n\n// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\n// getModifierState. If getModifierState is not supported, we map it to a set of\n// modifier keys exposed by the event. In this case, Lock-keys are not supported.\nfunction modifierStateGetter(keyArg) {\n  const syntheticEvent = this;\n  const nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  const keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst KeyboardEventInterface = {\n  ...UIEventInterface,\n  key: getEventKey,\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n};\nexport const SyntheticKeyboardEvent = createSyntheticEvent(\n  KeyboardEventInterface,\n);\n\n/**\n * @interface PointerEvent\n * @see http://www.w3.org/TR/pointerevents/\n */\nconst PointerEventInterface = {\n  ...MouseEventInterface,\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0,\n};\nexport const SyntheticPointerEvent = createSyntheticEvent(\n  PointerEventInterface,\n);\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nconst TouchEventInterface = {\n  ...UIEventInterface,\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: getEventModifierState,\n};\nexport const SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\nconst TransitionEventInterface = {\n  ...EventInterface,\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0,\n};\nexport const SyntheticTransitionEvent = createSyntheticEvent(\n  TransitionEventInterface,\n);\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst WheelEventInterface = {\n  ...MouseEventInterface,\n  deltaX(event) {\n    return 'deltaX' in event\n      ? event.deltaX\n      : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n      'wheelDeltaX' in event\n      ? -event.wheelDeltaX\n      : 0;\n  },\n  deltaY(event) {\n    return 'deltaY' in event\n      ? event.deltaY\n      : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n      'wheelDeltaY' in event\n      ? -event.wheelDeltaY\n      : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n      'wheelDelta' in event\n      ? -event.wheelDelta\n      : 0;\n  },\n  deltaZ: 0,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: 0,\n};\nexport const SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);\n"]},"metadata":{},"sourceType":"module"}