{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { enableDebugTracing } from 'shared/ReactFeatureFlags';\nconst nativeConsole = console;\nlet nativeConsoleLog = null;\nconst pendingGroupArgs = [];\nlet printedGroupIndex = -1;\n\nfunction formatLanes(laneOrLanes) {\n  return '0b' + laneOrLanes.toString(2).padStart(31, '0');\n}\n\nfunction group(...groupArgs) {\n  pendingGroupArgs.push(groupArgs);\n\n  if (nativeConsoleLog === null) {\n    nativeConsoleLog = nativeConsole.log;\n    nativeConsole.log = log;\n  }\n}\n\nfunction groupEnd() {\n  pendingGroupArgs.pop();\n\n  while (printedGroupIndex >= pendingGroupArgs.length) {\n    nativeConsole.groupEnd();\n    printedGroupIndex--;\n  }\n\n  if (pendingGroupArgs.length === 0) {\n    nativeConsole.log = nativeConsoleLog;\n    nativeConsoleLog = null;\n  }\n}\n\nfunction log(...logArgs) {\n  if (printedGroupIndex < pendingGroupArgs.length - 1) {\n    for (let i = printedGroupIndex + 1; i < pendingGroupArgs.length; i++) {\n      const groupArgs = pendingGroupArgs[i];\n      nativeConsole.group(...groupArgs);\n    }\n\n    printedGroupIndex = pendingGroupArgs.length - 1;\n  }\n\n  if (typeof nativeConsoleLog === 'function') {\n    nativeConsoleLog(...logArgs);\n  } else {\n    nativeConsole.log(...logArgs);\n  }\n}\n\nconst REACT_LOGO_STYLE = 'background-color: #20232a; color: #61dafb; padding: 0 2px;';\nexport function logCommitStarted(lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(`%c⚛️%c commit%c (${formatLanes(lanes)})`, REACT_LOGO_STYLE, '', 'font-weight: normal;');\n    }\n  }\n}\nexport function logCommitStopped() {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // $FlowFixMe: Flow cannot handle polymorphic WeakMaps\n\nconst wakeableIDs = new PossiblyWeakMap();\nlet wakeableID = 0;\n\nfunction getWakeableID(wakeable) {\n  if (!wakeableIDs.has(wakeable)) {\n    wakeableIDs.set(wakeable, wakeableID++);\n  }\n\n  return wakeableIDs.get(wakeable);\n}\n\nexport function logComponentSuspended(componentName, wakeable) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      const id = getWakeableID(wakeable);\n      const display = wakeable.displayName || wakeable;\n      log(`%c⚛️%c ${componentName} suspended`, REACT_LOGO_STYLE, 'color: #80366d; font-weight: bold;', id, display);\n      wakeable.then(() => {\n        log(`%c⚛️%c ${componentName} resolved`, REACT_LOGO_STYLE, 'color: #80366d; font-weight: bold;', id, display);\n      }, () => {\n        log(`%c⚛️%c ${componentName} rejected`, REACT_LOGO_STYLE, 'color: #80366d; font-weight: bold;', id, display);\n      });\n    }\n  }\n}\nexport function logLayoutEffectsStarted(lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(`%c⚛️%c layout effects%c (${formatLanes(lanes)})`, REACT_LOGO_STYLE, '', 'font-weight: normal;');\n    }\n  }\n}\nexport function logLayoutEffectsStopped() {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\nexport function logPassiveEffectsStarted(lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(`%c⚛️%c passive effects%c (${formatLanes(lanes)})`, REACT_LOGO_STYLE, '', 'font-weight: normal;');\n    }\n  }\n}\nexport function logPassiveEffectsStopped() {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\nexport function logRenderStarted(lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(`%c⚛️%c render%c (${formatLanes(lanes)})`, REACT_LOGO_STYLE, '', 'font-weight: normal;');\n    }\n  }\n}\nexport function logRenderStopped() {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\nexport function logForceUpdateScheduled(componentName, lane) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(`%c⚛️%c ${componentName} forced update %c(${formatLanes(lane)})`, REACT_LOGO_STYLE, 'color: #db2e1f; font-weight: bold;', '');\n    }\n  }\n}\nexport function logStateUpdateScheduled(componentName, lane, payloadOrAction) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(`%c⚛️%c ${componentName} updated state %c(${formatLanes(lane)})`, REACT_LOGO_STYLE, 'color: #01a252; font-weight: bold;', '', payloadOrAction);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/DebugTracing.js"],"names":["enableDebugTracing","nativeConsole","console","nativeConsoleLog","pendingGroupArgs","printedGroupIndex","formatLanes","laneOrLanes","toString","padStart","group","groupArgs","push","log","groupEnd","pop","length","logArgs","i","REACT_LOGO_STYLE","logCommitStarted","lanes","__DEV__","logCommitStopped","PossiblyWeakMap","WeakMap","Map","wakeableIDs","wakeableID","getWakeableID","wakeable","has","set","get","logComponentSuspended","componentName","id","display","displayName","then","logLayoutEffectsStarted","logLayoutEffectsStopped","logPassiveEffectsStarted","logPassiveEffectsStopped","logRenderStarted","logRenderStopped","logForceUpdateScheduled","lane","logStateUpdateScheduled","payloadOrAction"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Wakeable} from 'shared/ReactTypes';\n\nimport {enableDebugTracing} from 'shared/ReactFeatureFlags';\n\nconst nativeConsole: Object = console;\nlet nativeConsoleLog: null | Function = null;\n\nconst pendingGroupArgs: Array<any> = [];\nlet printedGroupIndex: number = -1;\n\nfunction formatLanes(laneOrLanes: Lane | Lanes): string {\n  return '0b' + (laneOrLanes: any).toString(2).padStart(31, '0');\n}\n\nfunction group(...groupArgs): void {\n  pendingGroupArgs.push(groupArgs);\n\n  if (nativeConsoleLog === null) {\n    nativeConsoleLog = nativeConsole.log;\n    nativeConsole.log = log;\n  }\n}\n\nfunction groupEnd(): void {\n  pendingGroupArgs.pop();\n  while (printedGroupIndex >= pendingGroupArgs.length) {\n    nativeConsole.groupEnd();\n    printedGroupIndex--;\n  }\n\n  if (pendingGroupArgs.length === 0) {\n    nativeConsole.log = nativeConsoleLog;\n    nativeConsoleLog = null;\n  }\n}\n\nfunction log(...logArgs): void {\n  if (printedGroupIndex < pendingGroupArgs.length - 1) {\n    for (let i = printedGroupIndex + 1; i < pendingGroupArgs.length; i++) {\n      const groupArgs = pendingGroupArgs[i];\n      nativeConsole.group(...groupArgs);\n    }\n    printedGroupIndex = pendingGroupArgs.length - 1;\n  }\n  if (typeof nativeConsoleLog === 'function') {\n    nativeConsoleLog(...logArgs);\n  } else {\n    nativeConsole.log(...logArgs);\n  }\n}\n\nconst REACT_LOGO_STYLE =\n  'background-color: #20232a; color: #61dafb; padding: 0 2px;';\n\nexport function logCommitStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c commit%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logCommitStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n// $FlowFixMe: Flow cannot handle polymorphic WeakMaps\nconst wakeableIDs: WeakMap<Wakeable, number> = new PossiblyWeakMap();\nlet wakeableID: number = 0;\nfunction getWakeableID(wakeable: Wakeable): number {\n  if (!wakeableIDs.has(wakeable)) {\n    wakeableIDs.set(wakeable, wakeableID++);\n  }\n  return ((wakeableIDs.get(wakeable): any): number);\n}\n\nexport function logComponentSuspended(\n  componentName: string,\n  wakeable: Wakeable,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      const id = getWakeableID(wakeable);\n      const display = (wakeable: any).displayName || wakeable;\n      log(\n        `%c⚛️%c ${componentName} suspended`,\n        REACT_LOGO_STYLE,\n        'color: #80366d; font-weight: bold;',\n        id,\n        display,\n      );\n      wakeable.then(\n        () => {\n          log(\n            `%c⚛️%c ${componentName} resolved`,\n            REACT_LOGO_STYLE,\n            'color: #80366d; font-weight: bold;',\n            id,\n            display,\n          );\n        },\n        () => {\n          log(\n            `%c⚛️%c ${componentName} rejected`,\n            REACT_LOGO_STYLE,\n            'color: #80366d; font-weight: bold;',\n            id,\n            display,\n          );\n        },\n      );\n    }\n  }\n}\n\nexport function logLayoutEffectsStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c layout effects%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logLayoutEffectsStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logPassiveEffectsStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c passive effects%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logPassiveEffectsStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logRenderStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c render%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logRenderStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logForceUpdateScheduled(\n  componentName: string,\n  lane: Lane,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(\n        `%c⚛️%c ${componentName} forced update %c(${formatLanes(lane)})`,\n        REACT_LOGO_STYLE,\n        'color: #db2e1f; font-weight: bold;',\n        '',\n      );\n    }\n  }\n}\n\nexport function logStateUpdateScheduled(\n  componentName: string,\n  lane: Lane,\n  payloadOrAction: any,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(\n        `%c⚛️%c ${componentName} updated state %c(${formatLanes(lane)})`,\n        REACT_LOGO_STYLE,\n        'color: #01a252; font-weight: bold;',\n        '',\n        payloadOrAction,\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}