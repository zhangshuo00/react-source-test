{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { FunctionComponent, ClassComponent, IndeterminateComponent, HostRoot, HostPortal, HostComponent, HostText, Fragment, Mode, ContextConsumer, ContextProvider, ForwardRef, Profiler, SuspenseComponent, MemoComponent, SimpleMemoComponent, LazyComponent, IncompleteClassComponent, DehydratedFragment, SuspenseListComponent, ScopeComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent } from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport { REACT_STRICT_MODE_TYPE } from 'shared/ReactSymbols'; // Keep in sync with shared/getComponentNameFromType\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  const functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber) {\n  const {\n    tag,\n    type\n  } = fiber;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      const context = type;\n      return getContextName(context) + '.Consumer';\n\n    case ContextProvider:\n      const provider = type;\n      return getContextName(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case LegacyHiddenComponent:\n      return 'LegacyHidden';\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-reconciler/src/getComponentNameFromFiber.js"],"names":["FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","getComponentNameFromType","REACT_STRICT_MODE_TYPE","getWrappedName","outerType","innerType","wrapperName","functionName","displayName","name","getContextName","type","getComponentNameFromFiber","fiber","tag","context","provider","_context","render"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case LegacyHiddenComponent:\n      return 'LegacyHidden';\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}