{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { resetCurrentFiber as resetCurrentDebugFiberInDEV, setCurrentFiber as setCurrentDebugFiberInDEV } from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport { StrictLegacyMode } from './ReactTypeOfMode';\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber, instance) {},\n\n  flushPendingUnsafeLifecycleWarnings() {},\n\n  recordLegacyContextWarning(fiber, instance) {},\n\n  flushLegacyContextWarning() {},\n\n  discardPendingWarnings() {}\n\n};\n\nif (__DEV__) {\n  const findStrictRoot = fiber => {\n    let maybeStrictRoot = null;\n    let node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings = [];\n  let pendingUNSAFE_ComponentWillMountWarnings = [];\n  let pendingComponentWillReceivePropsWarnings = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  let pendingComponentWillUpdateWarnings = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (fiber, instance) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n      console.error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n      console.error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n      console.error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n      console.warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillReceivePropsUniqueNames);\n      console.warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n      console.warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n  };\n\n  let pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (fiber, instance) => {\n    const strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      console.error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    pendingLegacyContextWarning.forEach((fiberArray, strictRoot) => {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      const firstFiber = fiberArray[0];\n      const uniqueNames = new Set();\n      fiberArray.forEach(fiber => {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      const sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentDebugFiberInDEV(firstFiber);\n        console.error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentDebugFiberInDEV();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/ReactStrictModeWarnings.new.js"],"names":["resetCurrentFiber","resetCurrentDebugFiberInDEV","setCurrentFiber","setCurrentDebugFiberInDEV","getComponentNameFromFiber","StrictLegacyMode","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","fiber","instance","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","__DEV__","findStrictRoot","maybeStrictRoot","node","mode","return","setToSortedString","set","array","forEach","value","push","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","has","type","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","length","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","console","error","warn","pendingLegacyContextWarning","Map","didWarnAboutLegacyContext","strictRoot","warningsForRoot","get","contextTypes","childContextTypes","getChildContext","undefined","fiberArray","firstFiber","uniqueNames"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n"]},"metadata":{},"sourceType":"module"}