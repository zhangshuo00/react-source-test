{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { NoLane, SyncLane, InputContinuousLane, DefaultLane, IdleLane, getHighestPriorityLane, includesNonIdleWork } from './ReactFiberLane.new';\nexport const DiscreteEventPriority = SyncLane;\nexport const ContinuousEventPriority = InputContinuousLane;\nexport const DefaultEventPriority = DefaultLane;\nexport const IdleEventPriority = IdleLane;\nlet currentUpdatePriority = NoLane;\nexport function getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nexport function setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nexport function runWithPriority(priority, fn) {\n  const previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nexport function higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nexport function lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nexport function isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nexport function lanesToEventPriority(lanes) {\n  const lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/ReactEventPriorities.new.js"],"names":["NoLane","SyncLane","InputContinuousLane","DefaultLane","IdleLane","getHighestPriorityLane","includesNonIdleWork","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","fn","previousPriority","higherEventPriority","a","b","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","lanes","lane"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SACEA,MADF,EAEEC,QAFF,EAGEC,mBAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,sBANF,EAOEC,mBAPF,QAQO,sBARP;AAYA,OAAO,MAAMC,qBAAoC,GAAGN,QAA7C;AACP,OAAO,MAAMO,uBAAsC,GAAGN,mBAA/C;AACP,OAAO,MAAMO,oBAAmC,GAAGN,WAA5C;AACP,OAAO,MAAMO,iBAAgC,GAAGN,QAAzC;AAEP,IAAIO,qBAAoC,GAAGX,MAA3C;AAEA,OAAO,SAASY,wBAAT,GAAmD;AACxD,SAAOD,qBAAP;AACD;AAED,OAAO,SAASE,wBAAT,CAAkCC,WAAlC,EAA8D;AACnEH,EAAAA,qBAAqB,GAAGG,WAAxB;AACD;AAED,OAAO,SAASC,eAAT,CAA4BC,QAA5B,EAAqDC,EAArD,EAAqE;AAC1E,QAAMC,gBAAgB,GAAGP,qBAAzB;;AACA,MAAI;AACFA,IAAAA,qBAAqB,GAAGK,QAAxB;AACA,WAAOC,EAAE,EAAT;AACD,GAHD,SAGU;AACRN,IAAAA,qBAAqB,GAAGO,gBAAxB;AACD;AACF;AAED,OAAO,SAASC,mBAAT,CACLC,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,OAAO,SAASC,kBAAT,CACLF,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,OAAO,SAASE,qBAAT,CACLH,CADK,EAELC,CAFK,EAGI;AACT,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAtB;AACD;AAED,OAAO,SAASG,oBAAT,CAA8BC,KAA9B,EAA2D;AAChE,QAAMC,IAAI,GAAGrB,sBAAsB,CAACoB,KAAD,CAAnC;;AACA,MAAI,CAACF,qBAAqB,CAAChB,qBAAD,EAAwBmB,IAAxB,CAA1B,EAAyD;AACvD,WAAOnB,qBAAP;AACD;;AACD,MAAI,CAACgB,qBAAqB,CAACf,uBAAD,EAA0BkB,IAA1B,CAA1B,EAA2D;AACzD,WAAOlB,uBAAP;AACD;;AACD,MAAIF,mBAAmB,CAACoB,IAAD,CAAvB,EAA+B;AAC7B,WAAOjB,oBAAP;AACD;;AACD,SAAOC,iBAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.new';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.new';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n"]},"metadata":{},"sourceType":"module"}