{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE } from 'shared/ReactSymbols';\nexport function createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  const context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n  let hasWarnedAboutDisplayNameOnConsumer = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n\n        set(_Provider) {\n          context.Provider = _Provider;\n        }\n\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        }\n\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        }\n\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n\n      },\n      displayName: {\n        get() {\n          return context.displayName;\n        },\n\n        set(displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            console.warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react/src/ReactContext.js"],"names":["REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","createContext","defaultValue","context","$$typeof","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","hasWarnedAboutUsingNestedContextConsumers","hasWarnedAboutUsingConsumerProvider","hasWarnedAboutDisplayNameOnConsumer","__DEV__","Object","defineProperties","get","console","error","set","_Provider","displayName","warn","_currentRenderer","_currentRenderer2"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nexport function createContext<T>(defaultValue: T): ReactContext<T> {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n\n  const context: ReactContext<T> = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: (null: any),\n    Consumer: (null: any),\n  };\n\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context,\n  };\n\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n  let hasWarnedAboutDisplayNameOnConsumer = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n    };\n    // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error(\n              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Provider> instead?',\n            );\n          }\n          return context.Provider;\n        },\n        set(_Provider) {\n          context.Provider = _Provider;\n        },\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        },\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        },\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        },\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error(\n              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Consumer> instead?',\n            );\n          }\n          return context.Consumer;\n        },\n      },\n      displayName: {\n        get() {\n          return context.displayName;\n        },\n        set(displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            console.warn(\n              'Setting `displayName` on Context.Consumer has no effect. ' +\n                \"You should set it directly on the context with Context.displayName = '%s'.\",\n              displayName,\n            );\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        },\n      },\n    });\n    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}