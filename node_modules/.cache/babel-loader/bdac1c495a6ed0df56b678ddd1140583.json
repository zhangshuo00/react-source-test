{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { Children } from 'react';\nimport { getToStringValue, toString } from './ToStringValue';\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\nlet didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nexport function validateProps(element, props) {\n  if (__DEV__) {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n            console.error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n          console.error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nexport function postMountWrapper(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/client/ReactDOMOption.js"],"names":["Children","getToStringValue","toString","didWarnSelectedSetOnOption","didWarnInvalidChild","didWarnInvalidInnerHTML","validateProps","element","props","__DEV__","value","children","forEach","child","console","error","dangerouslySetInnerHTML","selected","postMountWrapper","setAttribute"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,EAA0BC,QAA1B,QAAyC,iBAAzC;AAEA,IAAIC,0BAA0B,GAAG,KAAjC;AACA,IAAIC,mBAAmB,GAAG,KAA1B;AACA,IAAIC,uBAAuB,GAAG,KAA9B;AAEA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAyCC,KAAzC,EAAwD;AAC7D,MAAIC,OAAJ,EAAa;AACX;AACA,QAAID,KAAK,CAACE,KAAN,IAAe,IAAnB,EAAyB;AACvB,UAAI,OAAOF,KAAK,CAACG,QAAb,KAA0B,QAA1B,IAAsCH,KAAK,CAACG,QAAN,KAAmB,IAA7D,EAAmE;AACjEX,QAAAA,QAAQ,CAACY,OAAT,CAAiBJ,KAAK,CAACG,QAAvB,EAAiC,UAASE,KAAT,EAAgB;AAC/C,cAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AACD,cAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1D;AACD;;AACD,cAAI,CAACT,mBAAL,EAA0B;AACxBA,YAAAA,mBAAmB,GAAG,IAAtB;AACAU,YAAAA,OAAO,CAACC,KAAR,CACE,wDACE,oEAFJ;AAID;AACF,SAdD;AAeD,OAhBD,MAgBO,IAAIP,KAAK,CAACQ,uBAAN,IAAiC,IAArC,EAA2C;AAChD,YAAI,CAACX,uBAAL,EAA8B;AAC5BA,UAAAA,uBAAuB,GAAG,IAA1B;AACAS,UAAAA,OAAO,CAACC,KAAR,CACE,wEACE,iCAFJ;AAID;AACF;AACF,KA5BU,CA8BX;;;AACA,QAAIP,KAAK,CAACS,QAAN,IAAkB,IAAlB,IAA0B,CAACd,0BAA/B,EAA2D;AACzDW,MAAAA,OAAO,CAACC,KAAR,CACE,oEACE,iCAFJ;AAIAZ,MAAAA,0BAA0B,GAAG,IAA7B;AACD;AACF;AACF;AAED,OAAO,SAASe,gBAAT,CAA0BX,OAA1B,EAA4CC,KAA5C,EAA2D;AAChE;AACA,MAAIA,KAAK,CAACE,KAAN,IAAe,IAAnB,EAAyB;AACvBH,IAAAA,OAAO,CAACY,YAAR,CAAqB,OAArB,EAA8BjB,QAAQ,CAACD,gBAAgB,CAACO,KAAK,CAACE,KAAP,CAAjB,CAAtC;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {Children} from 'react';\nimport {getToStringValue, toString} from './ToStringValue';\n\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\nlet didWarnInvalidInnerHTML = false;\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nexport function validateProps(element: Element, props: Object) {\n  if (__DEV__) {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        Children.forEach(props.children, function(child) {\n          if (child == null) {\n            return;\n          }\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n            console.error(\n              'Cannot infer the option value of complex children. ' +\n                'Pass a `value` prop or use a plain string as children to <option>.',\n            );\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n          console.error(\n            'Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' +\n              'which value should be selected.',\n          );\n        }\n      }\n    }\n\n    // TODO: Remove support for `selected` in <option>.\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error(\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\n          'setting `selected` on <option>.',\n      );\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\n\nexport function postMountWrapper(element: Element, props: Object) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}