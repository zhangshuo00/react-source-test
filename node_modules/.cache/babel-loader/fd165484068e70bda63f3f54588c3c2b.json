{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\nimport { getFiberCurrentPropsFromNode } from '../client/ReactDOMComponentTree';\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n\n    default:\n      return false;\n  }\n}\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\n\n\nexport default function getListener(inst, registrationName) {\n  const stateNode = inst.stateNode;\n\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n\n  const props = getFiberCurrentPropsFromNode(stateNode);\n\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n\n  const listener = props[registrationName];\n\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(`Expected \\`${registrationName}\\` listener to be a function, instead got a value of \\`${typeof listener}\\` type.`);\n  }\n\n  return listener;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/events/getListener.js"],"names":["getFiberCurrentPropsFromNode","isInteractive","tag","shouldPreventMouseEvent","name","type","props","disabled","getListener","inst","registrationName","stateNode","listener","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAAQA,4BAAR,QAA2C,iCAA3C;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA6C;AAC3C,SACEA,GAAG,KAAK,QAAR,IACAA,GAAG,KAAK,OADR,IAEAA,GAAG,KAAK,QAFR,IAGAA,GAAG,KAAK,UAJV;AAMD;;AAED,SAASC,uBAAT,CACEC,IADF,EAEEC,IAFF,EAGEC,KAHF,EAIW;AACT,UAAQF,IAAR;AACE,SAAK,SAAL;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AACA,SAAK,sBAAL;AACA,SAAK,aAAL;AACA,SAAK,oBAAL;AACA,SAAK,aAAL;AACA,SAAK,oBAAL;AACA,SAAK,WAAL;AACA,SAAK,kBAAL;AACA,SAAK,cAAL;AACE,aAAO,CAAC,EAAEE,KAAK,CAACC,QAAN,IAAkBN,aAAa,CAACI,IAAD,CAAjC,CAAR;;AACF;AACE,aAAO,KAAP;AAdJ;AAgBD;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASG,WAAT,CACbC,IADa,EAEbC,gBAFa,EAGI;AACjB,QAAMC,SAAS,GAAGF,IAAI,CAACE,SAAvB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,WAAO,IAAP;AACD;;AACD,QAAML,KAAK,GAAGN,4BAA4B,CAACW,SAAD,CAA1C;;AACA,MAAIL,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA,WAAO,IAAP;AACD;;AACD,QAAMM,QAAQ,GAAGN,KAAK,CAACI,gBAAD,CAAtB;;AACA,MAAIP,uBAAuB,CAACO,gBAAD,EAAmBD,IAAI,CAACJ,IAAxB,EAA8BC,KAA9B,CAA3B,EAAiE;AAC/D,WAAO,IAAP;AACD;;AAED,MAAIM,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,UAAM,IAAIC,KAAJ,CACH,cAAaH,gBAAiB,0DAAyD,OAAOE,QAAS,UADpG,CAAN;AAGD;;AAED,SAAOA,QAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Props} from '../client/ReactDOMHostConfig';\n\nimport {getFiberCurrentPropsFromNode} from '../client/ReactDOMComponentTree';\n\nfunction isInteractive(tag: string): boolean {\n  return (\n    tag === 'button' ||\n    tag === 'input' ||\n    tag === 'select' ||\n    tag === 'textarea'\n  );\n}\n\nfunction shouldPreventMouseEvent(\n  name: string,\n  type: string,\n  props: Props,\n): boolean {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\nexport default function getListener(\n  inst: Fiber,\n  registrationName: string,\n): Function | null {\n  const stateNode = inst.stateNode;\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n  const listener = props[registrationName];\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(\n      `Expected \\`${registrationName}\\` listener to be a function, instead got a value of \\`${typeof listener}\\` type.`,\n    );\n  }\n\n  return listener;\n}\n"]},"metadata":{},"sourceType":"module"}