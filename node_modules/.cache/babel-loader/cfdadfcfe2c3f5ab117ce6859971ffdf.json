{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * These variables store information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\nlet root = null;\nlet startText = null;\nlet fallbackText = null;\nexport function initialize(nativeEventTarget) {\n  root = nativeEventTarget;\n  startText = getText();\n  return true;\n}\nexport function reset() {\n  root = null;\n  startText = null;\n  fallbackText = null;\n}\nexport function getData() {\n  if (fallbackText) {\n    return fallbackText;\n  }\n\n  let start;\n  const startValue = startText;\n  const startLength = startValue.length;\n  let end;\n  const endValue = getText();\n  const endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  const minEnd = startLength - start;\n\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  const sliceTail = end > 1 ? 1 - end : undefined;\n  fallbackText = endValue.slice(start, sliceTail);\n  return fallbackText;\n}\nexport function getText() {\n  if ('value' in root) {\n    return root.value;\n  }\n\n  return root.textContent;\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/react-source-test/src/react/packages/react-dom/src/events/FallbackCompositionState.js"],"names":["root","startText","fallbackText","initialize","nativeEventTarget","getText","reset","getData","start","startValue","startLength","length","end","endValue","endLength","minEnd","sliceTail","undefined","slice","value","textContent"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,YAAY,GAAG,IAAnB;AAEA,OAAO,SAASC,UAAT,CAAoBC,iBAApB,EAAuC;AAC5CJ,EAAAA,IAAI,GAAGI,iBAAP;AACAH,EAAAA,SAAS,GAAGI,OAAO,EAAnB;AACA,SAAO,IAAP;AACD;AAED,OAAO,SAASC,KAAT,GAAiB;AACtBN,EAAAA,IAAI,GAAG,IAAP;AACAC,EAAAA,SAAS,GAAG,IAAZ;AACAC,EAAAA,YAAY,GAAG,IAAf;AACD;AAED,OAAO,SAASK,OAAT,GAAmB;AACxB,MAAIL,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD;;AAED,MAAIM,KAAJ;AACA,QAAMC,UAAU,GAAGR,SAAnB;AACA,QAAMS,WAAW,GAAGD,UAAU,CAACE,MAA/B;AACA,MAAIC,GAAJ;AACA,QAAMC,QAAQ,GAAGR,OAAO,EAAxB;AACA,QAAMS,SAAS,GAAGD,QAAQ,CAACF,MAA3B;;AAEA,OAAKH,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGE,WAAxB,EAAqCF,KAAK,EAA1C,EAA8C;AAC5C,QAAIC,UAAU,CAACD,KAAD,CAAV,KAAsBK,QAAQ,CAACL,KAAD,CAAlC,EAA2C;AACzC;AACD;AACF;;AAED,QAAMO,MAAM,GAAGL,WAAW,GAAGF,KAA7B;;AACA,OAAKI,GAAG,GAAG,CAAX,EAAcA,GAAG,IAAIG,MAArB,EAA6BH,GAAG,EAAhC,EAAoC;AAClC,QAAIH,UAAU,CAACC,WAAW,GAAGE,GAAf,CAAV,KAAkCC,QAAQ,CAACC,SAAS,GAAGF,GAAb,CAA9C,EAAiE;AAC/D;AACD;AACF;;AAED,QAAMI,SAAS,GAAGJ,GAAG,GAAG,CAAN,GAAU,IAAIA,GAAd,GAAoBK,SAAtC;AACAf,EAAAA,YAAY,GAAGW,QAAQ,CAACK,KAAT,CAAeV,KAAf,EAAsBQ,SAAtB,CAAf;AACA,SAAOd,YAAP;AACD;AAED,OAAO,SAASG,OAAT,GAAmB;AACxB,MAAI,WAAWL,IAAf,EAAqB;AACnB,WAAOA,IAAI,CAACmB,KAAZ;AACD;;AACD,SAAOnB,IAAI,CAACoB,WAAZ;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * These variables store information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\n\nlet root = null;\nlet startText = null;\nlet fallbackText = null;\n\nexport function initialize(nativeEventTarget) {\n  root = nativeEventTarget;\n  startText = getText();\n  return true;\n}\n\nexport function reset() {\n  root = null;\n  startText = null;\n  fallbackText = null;\n}\n\nexport function getData() {\n  if (fallbackText) {\n    return fallbackText;\n  }\n\n  let start;\n  const startValue = startText;\n  const startLength = startValue.length;\n  let end;\n  const endValue = getText();\n  const endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  const minEnd = startLength - start;\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  const sliceTail = end > 1 ? 1 - end : undefined;\n  fallbackText = endValue.slice(start, sliceTail);\n  return fallbackText;\n}\n\nexport function getText() {\n  if ('value' in root) {\n    return root.value;\n  }\n  return root.textContent;\n}\n"]},"metadata":{},"sourceType":"module"}