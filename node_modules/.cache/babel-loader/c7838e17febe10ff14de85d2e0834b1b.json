{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { getStackByFiberInDevAndProd } from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nexport let current = null;\nexport let isRendering = false;\nexport function getCurrentFiberOwnerNameInDevOrNull() {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n\n    const owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nexport function setCurrentFiber(fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nexport function setIsRendering(rendering) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}","map":{"version":3,"sources":["/Users/zhangshuo/git/my-app/src/react/packages/react-reconciler/src/ReactCurrentFiber.js"],"names":["ReactSharedInternals","getStackByFiberInDevAndProd","getComponentNameFromFiber","ReactDebugCurrentFrame","current","isRendering","getCurrentFiberOwnerNameInDevOrNull","__DEV__","owner","_debugOwner","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","fiber","setIsRendering","rendering","getIsRendering"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,OAAOA,oBAAP,MAAiC,6BAAjC;AACA,SAAQC,2BAAR,QAA0C,4BAA1C;AACA,OAAOC,yBAAP,MAAsC,gDAAtC;AAEA,MAAMC,sBAAsB,GAAGH,oBAAoB,CAACG,sBAApD;AAEA,OAAO,IAAIC,OAAqB,GAAG,IAA5B;AACP,OAAO,IAAIC,WAAoB,GAAG,KAA3B;AAEP,OAAO,SAASC,mCAAT,GAA8D;AACnE,MAAIC,OAAJ,EAAa;AACX,QAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,IAAP;AACD;;AACD,UAAMI,KAAK,GAAGJ,OAAO,CAACK,WAAtB;;AACA,QAAID,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAClD,aAAON,yBAAyB,CAACM,KAAD,CAAhC;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASE,yBAAT,GAA6C;AAC3C,MAAIH,OAAJ,EAAa;AACX,QAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,EAAP;AACD,KAHU,CAIX;AACA;;;AACA,WAAOH,2BAA2B,CAACG,OAAD,CAAlC;AACD;;AACD,SAAO,EAAP;AACD;;AAED,OAAO,SAASO,iBAAT,GAA6B;AAClC,MAAIJ,OAAJ,EAAa;AACXJ,IAAAA,sBAAsB,CAACS,eAAvB,GAAyC,IAAzC;AACAR,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,WAAW,GAAG,KAAd;AACD;AACF;AAED,OAAO,SAASQ,eAAT,CAAyBC,KAAzB,EAAuC;AAC5C,MAAIP,OAAJ,EAAa;AACXJ,IAAAA,sBAAsB,CAACS,eAAvB,GAAyCF,yBAAzC;AACAN,IAAAA,OAAO,GAAGU,KAAV;AACAT,IAAAA,WAAW,GAAG,KAAd;AACD;AACF;AAED,OAAO,SAASU,cAAT,CAAwBC,SAAxB,EAA4C;AACjD,MAAIT,OAAJ,EAAa;AACXF,IAAAA,WAAW,GAAGW,SAAd;AACD;AACF;AAED,OAAO,SAASC,cAAT,GAA0B;AAC/B,MAAIV,OAAJ,EAAa;AACX,WAAOF,WAAP;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}